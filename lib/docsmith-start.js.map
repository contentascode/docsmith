{"version":3,"sources":["../src/docsmith-start.js"],"names":["debug","require","program","start","config","workspace","mapper","val","memo","split","arguments","option","action","wksp","parse","process","argv","link","source","baseurl","watch","dbg","mapping","package","console","log","run","warn"],"mappings":";;AAEA;;;;AAIA,IAAMA,QAAQC,QAAQ,OAAR,EAAiB,gBAAjB,CAAd;AACA,IAAMC,UAAUD,QAAQ,WAAR,CAAhB;AACA,IAAME,QAAQF,QAAQ,kBAAR,CAAd;AACA,IAAMG,SAASH,QAAQ,2BAAR,EAAqCG,MAApD;;AAEA,IAAIC,kBAAJ;;AAEA,IAAMC,SAAS,SAATA,MAAS,CAACC,GAAD,EAAMC,IAAN,EAAe;AAC5BA,OAAKD,IAAIE,KAAJ,CAAU,GAAV,EAAe,CAAf,CAAL,IAA0BF,IAAIE,KAAJ,CAAU,GAAV,EAAe,CAAf,CAA1B;AACA,SAAOD,IAAP;AACD,CAHD;;AAKAN,QACGQ,SADH,CACa,aADb,EAEGC,MAFH,CAEU,qBAFV,EAEiC,+BAFjC,EAGGA,MAHH,CAGU,qBAHV,EAGiC,kCAHjC,EAIGA,MAJH,CAIU,qBAJV,EAIiC,8BAJjC,EAIiEL,MAJjE,EAIyE,EAJzE,EAKGK,MALH,CAKU,aALV,EAKyB,iDALzB,EAMGA,MANH,CAMU,aANV,EAMyB,8CANzB,EAOGA,MAPH,CAOU,aAPV,EAOyB,2DAPzB,EAQGA,MARH,CAQU,YARV,EAQwB,gDARxB,EASGC,MATH,CASU,UAASC,IAAT,EAAe;AACrBR,cAAYQ,IAAZ;AACD,CAXH,EAYGC,KAZH,CAYSC,QAAQC,IAZjB;;IAcQC,I,GAA+Df,O,CAA/De,I;IAAMC,M,GAAyDhB,O,CAAzDgB,M;IAAQC,O,GAAiDjB,O,CAAjDiB,O;IAASC,K,GAAwClB,O,CAAxCkB,K;IAAcC,G,GAA0BnB,O,CAAjCF,K;IAAqBsB,O,GAAYpB,O,CAArBqB,O;;;AAElDC,QAAQC,GAAR,CAAY,SAAZ,EAAuBH,OAAvB;AACA;AACA,IAAIlB,MAAJ,EAAY;AACVJ,QAAM,QAAN,EAAgBI,MAAhB;AACA;AACAD,QAAMuB,GAAN,CAAU,EAAErB,SAAF,EAAaD,MAAb,EAAqBa,IAArB,EAA2BC,MAA3B,EAAmCE,KAAnC,EAA0CC,GAA1C,EAA+CF,OAA/C,EAAwDG,OAAxD,EAAV;AACD,CAJD,MAIO;AACLE,UAAQG,IAAR,CAAa,qEAAb;AACD","file":"docsmith-start.js","sourcesContent":["\n\n/**\n * Module dependencies.\n */\n\nconst debug = require('debug')('docsmith:start');\nconst program = require('commander');\nconst start = require('./docsmith/start');\nconst config = require('./docsmith/utils/settings').config;\n\nlet workspace;\n\nconst mapper = (val, memo) => {\n  memo[val.split(':')[0]] = val.split(':')[1];\n  return memo;\n};\n\nprogram\n  .arguments('[workspace]')\n  .option('-s, --source [path]', '[migrate] Source folder path]')\n  .option('--baseurl [baseurl]', 'Set site.baseurl metadata value.')\n  .option('--package [mapping]', 'Enables package:path mapping', mapper, {})\n  .option('-w, --watch', 'Watch content folder and serve on local server.')\n  .option('-d, --debug', 'Enable /debug-ui url for debugging pipeline.')\n  .option('-f, --force', 'Initialise whether the current directory is empty or not.')\n  .option('-l, --link', 'For development purposes. Link local packages.')\n  .action(function(wksp) {\n    workspace = wksp;\n  })\n  .parse(process.argv);\n\nconst { link, source, baseurl, watch, debug: dbg, package: mapping } = program;\n\nconsole.log('napping', mapping);\n// check if we could resolve the config.\nif (config) {\n  debug('config', config);\n  // called from a content as code instance, initialise from the instance configuration\n  start.run({ workspace, config, link, source, watch, dbg, baseurl, mapping });\n} else {\n  console.warn('Could not find config. Aborting start. Please contact the developer');\n}\n"]}