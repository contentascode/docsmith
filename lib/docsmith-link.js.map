{"version":3,"sources":["../src/docsmith-link.js"],"names":["debug","require","program","config","fs","path","os","mappings","usage","arguments","option","action","maps","map","mp","split","m","replace","homedir","parse","process","argv","unlink","forEach","to","from","symlink","lstatSync","isSymbolicLink","unlinkSync","existsSync","moveSync","console","log","e","exists","force","join","dirname","basename","code","ensureSymlinkSync","realpathSync","warn"],"mappings":";;;;AAEA;;;;AAIA,IAAMA,QAAQC,QAAQ,OAAR,EAAiB,eAAjB,CAAd;AACA,IAAMC,UAAUD,QAAQ,WAAR,CAAhB;AACA,IAAME,SAASF,QAAQ,2BAAR,EAAqCE,MAApD;AACA,IAAMC,KAAKH,QAAQ,UAAR,CAAX;AACA,IAAMI,OAAOJ,QAAQ,MAAR,CAAb;AACA,IAAMK,KAAKL,QAAQ,IAAR,CAAX;;AAEA,IAAIM,iBAAJ;;AAEAL,QACGM,KADH,CACS,0EADT,EAEGC,SAFH,CAEa,eAFb,EAE8B,8BAF9B,EAGGC,MAHH,CAGU,cAHV,EAG0B,0EAH1B,EAIGA,MAJH,CAIU,aAJV,EAIyB,gDAJzB,EAKGC,MALH,CAKU,UAASC,IAAT,EAAe;AACrBL,aAAWK,KAAKC,GAAL,CAAS;AAAA,WAAMC,GAAGC,KAAH,CAAS,GAAT,EAAcF,GAAd,CAAkB;AAAA,aAAKG,EAAEC,OAAF,CAAU,IAAV,EAAgBX,GAAGY,OAAH,KAAe,GAA/B,CAAL;AAAA,KAAlB,CAAN;AAAA,GAAT,CAAX;AACD,CAPH,EAQGC,KARH,CAQSC,QAAQC,IARjB;;AAUArB,MAAM,QAAN,EAAgBG,MAAhB;AACAH,MAAM,UAAN,EAAkBO,QAAlB;AACA;;AAEA,IAAIL,QAAQoB,MAAZ,EAAoB;AAClBf,WAASgB,OAAT,CAAiB,gBAAgB;AAAA;AAAA,QAAdC,EAAc;AAAA,QAAVC,IAAU;;AAC/B,QAAI;AACF,UAAMC,UAAUtB,GAAGuB,SAAH,CAAaH,EAAb,EAAiBI,cAAjB,EAAhB;AACA,UAAIF,OAAJ,EAAa;AACXtB,WAAGyB,UAAH,CAAcL,EAAd;AACAxB,cAAM,kBAAN,EAA0BwB,EAA1B;AACA,YAAIpB,GAAG0B,UAAH,CAAcN,KAAK,OAAnB,CAAJ,EAAiC;AAC/BpB,aAAG2B,QAAH,CAAYP,KAAK,OAAjB,EAA0BA,EAA1B;AACAxB,gBAAM,qBAAqBwB,EAArB,GAA0B,OAA1B,GAAoC,MAA1C,EAAkDA,EAAlD;AACD;AACF,OAPD,MAOO;AACLQ,gBAAQC,GAAR,CAAY,yBAAyBT,EAAzB,GAA8B,aAA1C;AACD;AACF,KAZD,CAYE,OAAOU,CAAP,EAAU;AACVF,cAAQC,GAAR,CAAY,8BAA8BR,IAA9B,GAAqC,MAArC,GAA8CD,EAA1D,EAA8DU,CAA9D;AACD;AACF,GAhBD;AAiBD,CAlBD,MAkBO;AACL3B,WAASgB,OAAT,CAAiB,iBAAgB;AAAA;AAAA,QAAdC,EAAc;AAAA,QAAVC,IAAU;;AAC/B,QAAI;AACF,UAAMU,SAAS/B,GAAG0B,UAAH,CAAcN,EAAd,CAAf;AACA,UAAME,UAAUtB,GAAGuB,SAAH,CAAaH,EAAb,EAAiBI,cAAjB,EAAhB;;AAEA,UAAIO,UAAU,CAACjC,QAAQkC,KAAvB,EAA8B;AAC5BJ,gBAAQC,GAAR,CAAY,iBAAiBT,EAAjB,GAAsB,wDAAlC;AACD,OAFD,MAEO,IAAIW,UAAU,CAACT,OAAX,IAAsBxB,QAAQkC,KAAlC,EAAyC;AAC9C,YAAI;AACFhC,aAAG2B,QAAH,CAAYP,EAAZ,EAAgBnB,KAAKgC,IAAL,CAAUhC,KAAKiC,OAAL,CAAad,EAAb,CAAV,EAA4BnB,KAAKkC,QAAL,CAAcf,EAAd,IAAoB,OAAhD,CAAhB;AACD,SAFD,CAEE,OAAOU,CAAP,EAAU;AACV,cAAIA,EAAEM,IAAF,KAAW,QAAf,EAAyBR,QAAQC,GAAR,CAAY,4BAA4BR,IAA5B,GAAmC,MAAnC,GAA4CD,EAA5C,GAAiD,oBAA7D,EAAzB,KACK,MAAMU,CAAN;AACN;AACD9B,WAAGqC,iBAAH,CAAqBrC,GAAGsC,YAAH,CAAgBjB,IAAhB,CAArB,EAA4CD,EAA5C;AACAQ,gBAAQC,GAAR,CACE,oBAAoBR,IAApB,GAA2B,MAA3B,GAAoCD,EAApC,GAAyC,6BAAzC,GAAyEnB,KAAKkC,QAAL,CAAcf,EAAd,CAAzE,GAA6F,OAD/F;AAGD,OAXM,MAWA;AACLpB,WAAGqC,iBAAH,CAAqBrC,GAAGsC,YAAH,CAAgBjB,IAAhB,CAArB,EAA4CD,EAA5C;AACAW,iBACIH,QAAQC,GAAR,CAAY,gCAAgCR,IAAhC,GAAuC,MAAvC,GAAgDD,EAA5D,CADJ,GAEIQ,QAAQC,GAAR,CAAY,oBAAoBR,IAApB,GAA2B,MAA3B,GAAoCD,EAAhD,CAFJ;AAGD;AACF,KAvBD,CAuBE,OAAOU,CAAP,EAAU;AACVF,cAAQC,GAAR,CAAY,4BAA4BR,IAA5B,GAAmC,MAAnC,GAA4CD,EAAxD,EAA4DU,CAA5D;AACD;AACF,GA3BD;AA4BD;;AAED,IAAI9B,GAAG0B,UAAH,EAAJ,EACE,IAAI3B,MAAJ,EAAY;AACV;AACA;AACA;AACA;AACD,CALD,MAKO;AACL6B,UAAQW,IAAR,CAAa,qEAAb;AACD","file":"docsmith-link.js","sourcesContent":["\n\n/**\n * Module dependencies.\n */\n\nconst debug = require('debug')('docsmith:link');\nconst program = require('commander');\nconst config = require('./docsmith/utils/settings').config;\nconst fs = require('fs-extra');\nconst path = require('path');\nconst os = require('os');\n\nlet mappings;\n\nprogram\n  .usage('Linking will automatically overwrite symlinks but save original folders.')\n  .arguments('[mappings...]', 'Enables package:path mapping')\n  .option('-u, --unlink', 'Remove symlinks and restore original state if pointing to actual folder.')\n  .option('-f, --force', 'Link whether the package path is empty or not.')\n  .action(function(maps) {\n    mappings = maps.map(mp => mp.split(':').map(m => m.replace('~/', os.homedir() + '/')));\n  })\n  .parse(process.argv);\n\ndebug('config', config);\ndebug('mappings', mappings);\n// const { link, source, baseurl, watch, debug: dbg, package: mapping } = program;\n\nif (program.unlink) {\n  mappings.forEach(([to, from]) => {\n    try {\n      const symlink = fs.lstatSync(to).isSymbolicLink();\n      if (symlink) {\n        fs.unlinkSync(to);\n        debug('Unlinked symlink', to);\n        if (fs.existsSync(to + '.orig')) {\n          fs.moveSync(to + '.orig', to);\n          debug('Restored folder ' + to + '.orig' + ' to ', to);\n        }\n      } else {\n        console.log('Could not find link ' + to + '. Skipping.');\n      }\n    } catch (e) {\n      console.log('Could not unlink package ' + from + ' to ' + to, e);\n    }\n  });\n} else {\n  mappings.forEach(([to, from]) => {\n    try {\n      const exists = fs.existsSync(to);\n      const symlink = fs.lstatSync(to).isSymbolicLink();\n\n      if (exists && !program.force) {\n        console.log('Skipping as ' + to + ' folder already exists. Use --force to replace folder.');\n      } else if (exists && !symlink && program.force) {\n        try {\n          fs.moveSync(to, path.join(path.dirname(to), path.basename(to) + '.orig'));\n        } catch (e) {\n          if (e.code === 'EEXIST') console.log('Package already linked ' + from + ' to ' + to + ' use unlink first.');\n          else throw e;\n        }\n        fs.ensureSymlinkSync(fs.realpathSync(from), to);\n        console.log(\n          'Linked package ' + from + ' to ' + to + 'and saved original folder: ' + path.basename(to) + '.orig'\n        );\n      } else {\n        fs.ensureSymlinkSync(fs.realpathSync(from), to);\n        exists\n          ? console.log('Linked package overwritten ' + from + ' to ' + to)\n          : console.log('Linked package ' + from + ' to ' + to);\n      }\n    } catch (e) {\n      console.log('Could not link package ' + from + ' to ' + to, e);\n    }\n  });\n}\n\nif (fs.existsSync())\n  if (config) {\n    // check if we could resolve the config.\n    // debug('config', config);\n    // called from a content as code instance, initialise from the instance configuration\n    // start.run({ workspace, config, link, source, watch, dbg, baseurl, mapping });\n  } else {\n    console.warn('Could not find config. Aborting start. Please contact the developer');\n  }\n"]}