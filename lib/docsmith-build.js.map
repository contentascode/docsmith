{"version":3,"sources":["../src/docsmith-build.js"],"names":["program","require","settings","spawn","path","fs","component","id","x","description","option","arguments","action","comp","parse","process","argv","force","console","log","exit","generate","config","build","fileExists","join","cwd","metalsmith","destination","metadata","formatDate","date","format","serve","watch","redirects","Object","assign","publish","baseurl","plugins","push","document_root","http_error_files","paths","reload","livereload","customHTML","validate","writeFile","JSON","stringify","err","jekyll","concat","env","stdio","filePath","statSync","isFile"],"mappings":"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","file":"docsmith-build.js","sourcesContent":["\n\n/**\n * Module dependencies.\n */\n\nconst program = require('commander');\nconst settings = require('./docsmith/utils/settings').settings;\nconst spawn = require('child_process').spawn;\nconst path = require('path');\nconst fs = require('fs');\n\nlet component;\n\nconst id = x => x;\n\nprogram\n  .description('Builds or serves the current content')\n  .option('-f, --force', 'Initialise whether the current directory is empty or not.', id, false)\n  .option('-s, --serve', 'Serves')\n  .option('-w, --watch', 'Serves and watches')\n  .option('-r, --reload', 'Live reload')\n  .option('-v, --validate', 'Validate links')\n  .option('-c, --config <config>', 'Specify configuration file')\n  .option('-d, --destination <directory>', 'Specify build destination')\n  .arguments('[component] [options]')\n  .action(function(comp) {\n    component = comp;\n  })\n  .parse(process.argv);\n\nif (!program.force) {\n  console.log('EXPERIMENTAL -  This is probably not working. Use --force to bypass this warning.');\n  process.exit(0);\n}\n\nif (component) console.log('Ignoring option component', component);\n\nconsole.log('settings', settings);\nif (!settings.generate) {\n  console.log('You do not have a static site generator installed.');\n}\n\nlet config;\n\nif (settings.build && settings.build == 'grunt') {\n  if (!fileExists(path.join(process.cwd(), 'Gruntfile.js'))) {\n    console.log('Could not find a metalsmith configuration file.');\n    process.exit(1);\n  }\n  // const grunt = spawn('grunt', [], { env: process.env, stdio: 'inherit' });\n} else if (settings.generate.metalsmith) {\n  if (program.config && fileExists(path.join(process.cwd(), program.config))) {\n    config = require(path.join(process.cwd(), program.config));\n  } else if (fileExists(path.join(process.cwd(), 'metalsmith.json'))) {\n    config = require(path.join(process.cwd(), 'metalsmith.json'));\n  } else {\n    console.log('Could not find a metalsmith configuration file.');\n    process.exit(1);\n  }\n\n  if (program.destination) {\n    config.destination = program.destination;\n  }\n\n  //  var metalsmith = spawn('metalsmith', [''], { env: process.env, stdio: \"inherit\"});\n\n  // provide a formatting function for use in templates\n  config.metadata.formatDate = function(date, format) {\n    return require('moment')(date).format(format || 'MMMM Do, YYYY');\n  };\n  // only enable live-reloading when requested\n  if (program.serve || program.watch) {\n    const redirects = Object.assign(\n      {\n        '/': settings.publish.baseurl + '/'\n      },\n      settings.publish.redirects\n    );\n\n    config.plugins.push({\n      'metalsmith-serve': {\n        document_root: '_site',\n        redirects,\n        http_error_files: {\n          '404': settings.publish.baseurl + '/404.html'\n        }\n      }\n    });\n  }\n\n  if (program.watch) {\n    const watch = {\n      'metalsmith-watch': {\n        paths: {\n          '${source}/**/*.md': true,\n          '_layouts/**': '**/*.md',\n          '_includes/**': '**/*.md'\n        }\n      }\n    };\n    if (program.reload) {\n      watch['metalsmith-watch'].livereload = 35729;\n      config.metadata.customHTML = '<script src=\"http://localhost:35729/livereload.js?snipver=1\"></script>';\n    }\n    config.plugins.push(watch);\n  }\n  // if (program.watch && program.reload) {\n  //   config.plugins.push( { 'metalsmith-watch' : { livereload: 35729 } } );\n  //   config.metadata.customHTML = '<script src=\"http://localhost:35729/livereload.js?snipver=1\"></script>';\n  // }\n  if (program.validate) {\n    config.plugins.push({ 'metalsmith-broken-link-checker': true });\n  }\n  // config.plugins.find( x => { for (k in x) { return (k == 'metalsmith-ignore') } } )['metalsmith-ignore'].push(\"metalsmith.tmp.json\");\n  // Swallow the --watch option\n  process.argv = [];\n\n  fs.writeFile('metalsmith.tmp.json', JSON.stringify(config, null, 2), 'utf8', function(err) {\n    if (err) {\n      console.log(err);\n      process.exit(1);\n    }\n    process.argv.push('/usr/local/bin/node', '/usr/local/bin/content-build', '--config', 'metalsmith.tmp.json');\n    require('metalsmith/bin/metalsmith');\n  });\n} else if (settings.generate.jekyll) {\n  config = program.config ? ['--config', program.config] : [];\n  spawn('bundle', ['exec', 'jekyll', 'build'].concat(config), { env: process.env, stdio: 'inherit' });\n}\n\nfunction fileExists(filePath) {\n  try {\n    return fs.statSync(filePath).isFile();\n  } catch (err) {\n    return false;\n  }\n}\n"]}