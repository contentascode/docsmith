{"version":3,"sources":["../../src/docsmith/packages.js"],"names":["debug","require","fs","npm","async","yaml","safeLoad","read","readFileSync","path","install","done","repos","repository","link","length","reduce","Object","keys","map","name","repo","pkgs","callback","console","log","load","save","progress","loglevel","process","env","DEBUG","err","commands","code","error","pkgid","exists","pathExistsSync","join","content","packages","concat","results","module","exports"],"mappings":";;AAAA,IAAMA,QAAQC,QAAQ,OAAR,EAAiB,eAAjB,CAAd;AACA,IAAMC,KAAKD,QAAQ,UAAR,CAAX;AACA,IAAME,MAAMF,QAAQ,KAAR,CAAZ;AACA,IAAMG,QAAQH,QAAQ,OAAR,CAAd;AACA,IAAMI,OAAOJ,QAAQ,SAAR,EAAmBK,QAAhC;AACA,IAAMC,OAAON,QAAQ,IAAR,EAAcO,YAA3B;AACA,IAAMC,OAAOR,QAAQ,MAAR,CAAb;;AAEA;AACA,IAAMS,UAAU,SAASA,OAAT,OAA8CC,IAA9C,EAAoD;AAAA,MAAjCC,KAAiC,QAAjCA,KAAiC;AAAA,MAA1BC,UAA0B,QAA1BA,UAA0B;AAAA,MAAdC,IAAc,QAAdA,IAAc;;AAClE,MAAI,CAACF,KAAD,IAAUA,MAAMG,MAAN,IAAgB,CAA9B,EAAiC,OAAOJ,MAAP;AACjCP,QAAMY,MAAN,CACEC,OAAOC,IAAP,CAAYN,KAAZ,EAAmBO,GAAnB,CAAuB;AAAA,WAAS,EAAEC,IAAF,EAAQC,MAAMT,MAAMQ,IAAN,CAAd,EAAT;AAAA,GAAvB,CADF,EAEE,EAFF,EAGE,UAACE,IAAD,SAAuBC,QAAvB,EAAoC;AAAA,QAA3BH,IAA2B,SAA3BA,IAA2B;AAAA,QAArBC,IAAqB,SAArBA,IAAqB;;AAClC,QAAIP,IAAJ,EAAU;AACRd,YAAM,iCAAiCoB,IAAvC;AACD,KAFD,MAEO;AACLI,cAAQC,GAAR,CAAY,YAAZ,EAA0BJ,IAA1B;AACArB,YAAM,oCAAoCqB,IAA1C;AACD;;AAED;AACA;AACA;AACA;AACA;;AAEAlB,QAAIuB,IAAJ,CAAS,EAAEC,MAAM,KAAR,EAAeC,UAAU,KAAzB,EAAgCC,UAAUC,QAAQC,GAAR,CAAYC,KAAZ,GAAoB,MAApB,GAA6B,QAAvE,EAAT,EAA4F,UAASC,GAAT,EAAc;AACxG,UAAIA,GAAJ,EAAS,OAAOA,GAAP;AACT9B,UAAI+B,QAAJ,CAAapB,OAAO,MAAP,GAAgB,SAA7B,EAAwC,CAACA,OAAOM,IAAP,GAAcC,IAAf,CAAxC,EAA8D,UAASY,GAAT,EAAc;AAC1E,YAAIA,OAAOA,IAAIE,IAAJ,KAAa,MAAxB,EAAgC;AAC9BX,kBAAQY,KAAR,CAAc,qCAAqCH,IAAII,KAAvD;AACA,iBAAOd,SAASU,GAAT,CAAP;AACD;AACD,YAAIA,GAAJ,EAAS;AACPT,kBAAQY,KAAR,CAAcH,GAAd;AACA,iBAAOV,SAASU,GAAT,CAAP;AACD;;AAED,YAAMK,SAASpC,GAAGqC,cAAH,CAAkB9B,KAAK+B,IAAL,CAAU3B,UAAV,EAAsB,cAAtB,EAAsCO,IAAtC,EAA4C,eAA5C,CAAlB,CAAf;AACA;AACA,YAAI,CAACkB,MAAL,EAAa,OAAOf,UAAP;;AAEb;AACA,YAAMkB,UAAUpC,KAAKE,KAAKE,KAAK+B,IAAL,CAAU3B,UAAV,EAAsB,cAAtB,EAAsCO,IAAtC,EAA4C,eAA5C,CAAL,EAAmE,MAAnE,CAAL,CAAhB;;AAEA;AACAV,gBAAQ,EAAEE,OAAO6B,QAAQC,QAAjB,EAA2B7B,UAA3B,EAAuCC,IAAvC,EAAR,EAAuD,eAAO;AAC5D,cAAImB,GAAJ,EAAS,OAAOV,SAASU,GAAT,CAAP;AACT,iBAAOV,SAAS,IAAT,EAAeD,KAAKqB,MAAL,CAAY,EAAEvB,IAAF,EAAQqB,OAAR,EAAZ,CAAf,CAAP;AACD,SAHD;AAID,OAtBD;AAuBD,KAzBD;AA0BD,GA3CH,EA4CE,UAACR,GAAD,EAAMW,OAAN,EAAkB;AAChB,QAAIX,GAAJ,EAAS,OAAOtB,KAAKsB,GAAL,CAAP;AACTtB,SAAK,IAAL,EAAWiC,OAAX;AACD,GA/CH;AAiDD,CAnDD;;AAqDAC,OAAOC,OAAP,CAAepC,OAAf,GAAyBA,OAAzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"packages.js","sourcesContent":["const debug = require('debug')('docsmith:init');\nconst fs = require('fs-extra');\nconst npm = require('npm');\nconst async = require('async');\nconst yaml = require('js-yaml').safeLoad;\nconst read = require('fs').readFileSync;\nconst path = require('path');\n\n// If link is true then do not install the npm package and link a local version instead\nconst install = function install({ repos, repository, link }, done) {\n  if (!repos || repos.length == 0) return done();\n  async.reduce(\n    Object.keys(repos).map(name => ({ name, repo: repos[name] })),\n    [],\n    (pkgs, { name, repo }, callback) => {\n      if (link) {\n        debug('>> Linking content package: ' + name);\n      } else {\n        console.log('Installing', repo);\n        debug('>> Installing content package: ' + repo);\n      }\n\n      // link uses npm.globalDir to check for locally linked packages and npm.dir for the installation destination.\n      // npm.globalDir is a read only property based on globalPrefix\n      // npm.dir is a read only property based on npm.prefix\n      // npm.prefix\n      // link therefore needs both to be set but setting prefix manually overrides both...\n\n      npm.load({ save: false, progress: false, loglevel: process.env.DEBUG ? 'info' : 'silent' }, function(err) {\n        if (err) return err;\n        npm.commands[link ? 'link' : 'install']([link ? name : repo], function(err) {\n          if (err && err.code === 'E404') {\n            console.error('Could not find content package: ' + err.pkgid);\n            return callback(err);\n          }\n          if (err) {\n            console.error(err);\n            return callback(err);\n          }\n\n          const exists = fs.pathExistsSync(path.join(repository, 'node_modules', name, './content.yml'));\n          // Skip if there is no content.yml in the installed package\n          if (!exists) return callback();\n\n          // Otherwise gather the content of the content.yml.\n          const content = yaml(read(path.join(repository, 'node_modules', name, './content.yml'), 'utf8'));\n\n          // recursively install content packages.\n          install({ repos: content.packages, repository, link }, err => {\n            if (err) return callback(err);\n            return callback(null, pkgs.concat({ name, content }));\n          });\n        });\n      });\n    },\n    (err, results) => {\n      if (err) return done(err);\n      done(null, results);\n    }\n  );\n};\n\nmodule.exports.install = install;\n\n// var pnpm = require('supi');\n// module.exports.install = function(repos, prefix, done) {\n//   pnpm\n//     .installPkgs(repos, { prefix })\n//     .then((...res) =>\n//       async.forEach(\n//         repos,\n//         (repo, cb) => {\n//           console.log(repo);\n//         },\n//         done\n//       )\n//     )\n//     .catch(done);\n// };\n"]}