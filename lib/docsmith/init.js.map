{"version":3,"sources":["../../src/docsmith/init.js"],"names":["debug","require","fs","read","readFileSync","path","yaml","safeLoad","chalk","settings","packages","workspaces","pad","string","char","length","repeat","slice","init","template","config","link","defaults","pathExists","join","err","exists","exit","promzard","file","resolve","__dirname","content","console","log","grey","description","instance","Object","keys","map","repo","yellow","responses","message","confirm","process","existsSync","repository","mkdirSync","writeFileSync","JSON","stringify","private","current","cwd","chdir","install","repos","installed","deploy","name","workspace","deployed","error","red","module","exports","run"],"mappings":"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","file":"init.js","sourcesContent":["const debug = require('debug')('docsmith:init');\nconst fs = require('fs-extra');\nconst read = require('fs').readFileSync;\nconst path = require('path');\n// var npmi = require('npmi');\nconst yaml = require('js-yaml').safeLoad;\n\nconst chalk = require('chalk');\nrequire('longjohn');\n\nconst settings = require('./utils/settings');\nconst packages = require('./init/packages');\nconst workspaces = require('./init/workspaces');\n\nconst pad = (string, char, length) => (string + char.repeat(length)).slice(0, length);\n\nfunction init({ template, config, link, defaults }) {\n  // Content as code CLI tool (i.e. not the bare `content` command)\n  fs.pathExists(path.join(config, './content.yml'), (err, exists) => {\n    if (err) return exit('Error while checking if content.yml exists', err); // => null\n    if (exists) {\n      // There is a content.yml file.\n      if (template) {\n        // TODO: Deal with instance templates\n        return exit('\\nError while initialising: template instances are not yet supported');\n      }\n      const promzard = require('promzard');\n      const file = path.resolve(__dirname, './utils/prompt.js');\n      const content = yaml(read(path.join(config, './content.yml'), 'utf8'));\n\n      console.log(\n        '\\n' +\n          '\\n' +\n          chalk.grey('============================================================================') +\n          '\\n' +\n          chalk.grey('===========                                                      ===========') +\n          '\\n' +\n          chalk.grey('===========') +\n          '            ' +\n          pad((settings.description || settings.instance) + ' Initialisation', ' ', 42) +\n          chalk.grey('===========') +\n          '\\n' +\n          chalk.grey('===========                                                      ===========') +\n          '\\n' +\n          chalk.grey('============================================================================') +\n          '\\n' +\n          '\\n' +\n          'This script will initialise the current directory as your workspace.' +\n          '\\n' +\n          '\\n' +\n          'It will also update your global `.content` repository' +\n          '\\n' +\n          'and install the following content packages and their dependencies:' +\n          '\\n' +\n          '\\n' +\n          Object.keys(content.packages).map(repo => '\\t' + repo + ': ' + content.packages[repo] + '\\n') +\n          '\\n' +\n          \"Please answer a few questions below and you'll be up and running in no time\" +\n          '\\n' +\n          '\\n' +\n          chalk.yellow(\n            'NOTE: This is a prototype, please accept defaults by hitting enter\\n or hit Ctrl-C at any time to exit.'\n          ) +\n          '\\n'\n      );\n\n      promzard(file, { content, defaults }, (err, responses) => {\n        if ((err && err.message == 'canceled') || (responses && responses.confirm !== 'yes')) {\n          console.log('\\nExiting without initialising. See ya!');\n          process.exit(0);\n        }\n        if (err) exit('Error while processing prompt results', err);\n\n        if (fs.existsSync(responses.repository)) {\n          debug('> Content repository folder already exists. Continuing.');\n        } else {\n          debug('> Content repository folder does not exists. Creating folder.');\n          fs.mkdirSync(responses.repository);\n          debug('> Content repository ' + responses.repository + ' has been created.');\n        }\n\n        if (fs.existsSync(path.join(responses.repository, 'package.json'))) {\n          debug('> Content repository configuration file already exists. Continuing.');\n        } else {\n          debug('> Content repository configuration file does not exists. Creating.');\n          fs.writeFileSync(path.join(responses.repository, 'package.json'), JSON.stringify({ private: true }), 'utf-8');\n          debug('> Content repository configuration ' + responses.repository + '/package.json has been created.');\n        }\n\n        // Change working directory temporarily as npm api is insufficient.\n        const current = process.cwd();\n        try {\n          process.chdir(responses.repository);\n        } catch (err) {\n          exit('\\nError while changing directory', err);\n        }\n        packages.install({ repos: content.packages, repository: responses.repository, link }, (err, installed) => {\n          if (err) return exit('\\nError while installing packages', err);\n          // console.log('Content packages installed:' + JSON.stringify(installed));\n          // Deploying worksaces\n\n          // restore working directory\n          try {\n            process.chdir(current);\n          } catch (err) {\n            exit('\\nError while changing directory', err);\n          }\n\n          workspaces.deploy(\n            installed.map(({ name, content: { workspace } }) => ({ name, workspace })),\n            responses.repository,\n            (err, deployed) => {\n              if (err) exit('\\nError while deploying workspaces', err);\n              debug('deployed', deployed);\n\n              console.log(\n                '\\n' +\n                  chalk.grey('============================================================================') +\n                  '\\n' +\n                  chalk.grey('===========                                                      ===========') +\n                  '\\n' +\n                  chalk.grey('===========') +\n                  '   Initialisation complete.                           ' +\n                  chalk.grey('===========') +\n                  '\\n' +\n                  chalk.grey('===========') +\n                  '   - use ' +\n                  chalk.yellow(settings.instance + ' start') +\n                  pad(' to open the ' + settings.description, ' ', 19 + (settings.instance + ' start').length) +\n                  chalk.grey('===========') +\n                  '\\n' +\n                  chalk.grey('===========                                                      ===========') +\n                  '\\n' +\n                  chalk.grey('============================================================================') +\n                  '\\n'\n              );\n\n              // I'll want to save the location of the workspace to the content repo to allow\n              // launching `safetag start` from anywhere.\n\n              return;\n            }\n          );\n        });\n      });\n\n      //   - Use `safetag-toolkit` as its default init mode.\n      //   - npm install `content.yml` dependencies in `~/.content/packages`\n      //   - `bootstrap`\n      //     - version controlled staging directory\n      //       - ask about fork origin remote.\n      //         - if no entry then point to doc and setup only `upstream` remote\n      //       - create git repo in `~/.content/staging/@safetag/*` for each dependent modules and publication containers.\n      //       - content.yml manages versions?\n      //     - working directory\n      //       - render taxonomy from `content` folder in `toolkit` package. (metalsmith workspace deploy config)\n    } else {\n      console.error(\n        'Error: CLI tool does not have a content.yml configuration file. Please report the error to the developer.'\n      );\n      process.exit(1, '');\n    }\n  });\n}\n\nconst exit = (message, error) => {\n  {\n    console.log(chalk.red('\\n' + message + '\\n'));\n    if (error) console.log('error', error);\n    console.log(\n      chalk.grey('\\n==================================================================\\n\\n') +\n        chalk.red(\n          'Please alert the developer by submitting an issue \\nat https://github.com/contentascode/safetag/issues and copy the whole output of the command above.\\n\\nApologies for the inconvenience!\\n'\n        )\n    );\n    process.exit(1);\n  }\n};\n\nmodule.exports.run = init;\n"]}