{"version":3,"sources":["../../src/docsmith/init.js"],"names":["debug","require","fs","read","readFileSync","path","yaml","safeLoad","chalk","packages","workspaces","init","template","config","link","defaults","pathExists","join","err","exists","exit","promzard","file","resolve","__dirname","content","console","log","grey","Object","keys","map","repo","yellow","responses","message","confirm","process","existsSync","repository","mkdirSync","writeFileSync","JSON","stringify","private","current","cwd","chdir","install","repos","installed","deploy","name","workspace","deployed","error","red","module","exports"],"mappings":";;AAAA,IAAMA,QAAQC,QAAQ,OAAR,EAAiB,eAAjB,CAAd;AACA,IAAMC,KAAKD,QAAQ,UAAR,CAAX;AACA,IAAME,OAAOF,QAAQ,IAAR,EAAcG,YAA3B;AACA,IAAMC,OAAOJ,QAAQ,MAAR,CAAb;AACA;AACA,IAAMK,OAAOL,QAAQ,SAAR,EAAmBM,QAAhC;;AAEA,IAAMC,QAAQP,QAAQ,OAAR,CAAd;AACAA,QAAQ,UAAR;;AAEA,IAAMQ,WAAWR,QAAQ,YAAR,CAAjB;AACA,IAAMS,aAAaT,QAAQ,cAAR,CAAnB;;AAEA,SAASU,IAAT,OAAoD;AAAA,MAApCC,QAAoC,QAApCA,QAAoC;AAAA,MAA1BC,MAA0B,QAA1BA,MAA0B;AAAA,MAAlBC,IAAkB,QAAlBA,IAAkB;AAAA,MAAZC,QAAY,QAAZA,QAAY;;AAClD;AACAb,KAAGc,UAAH,CAAcX,KAAKY,IAAL,CAAUJ,MAAV,EAAkB,eAAlB,CAAd,EAAkD,UAACK,GAAD,EAAMC,MAAN,EAAiB;AACjE,QAAID,GAAJ,EAAS,OAAOE,KAAK,4CAAL,EAAmDF,GAAnD,CAAP,CADwD,CACQ;AACzE,QAAIC,MAAJ,EAAY;AACV;AACA,UAAIP,QAAJ,EAAc;AACZ;AACA,eAAOQ,KAAK,sEAAL,CAAP;AACD;AACD,UAAMC,WAAWpB,QAAQ,UAAR,CAAjB;AACA,UAAMqB,OAAOjB,KAAKkB,OAAL,CAAaC,SAAb,EAAwB,mBAAxB,CAAb;AACA,UAAMC,UAAUnB,KAAKH,KAAKE,KAAKY,IAAL,CAAUJ,MAAV,EAAkB,eAAlB,CAAL,EAAyC,MAAzC,CAAL,CAAhB;;AAEAa,cAAQC,GAAR,CACE,OACE,IADF,GAEEnB,MAAMoB,IAAN,CAAW,8EAAX,CAFF,GAGE,IAHF,GAIEpB,MAAMoB,IAAN,CAAW,8EAAX,CAJF,GAKE,IALF,GAMEpB,MAAMoB,IAAN,CAAW,aAAX,CANF,GAOE,wDAPF,GAQEpB,MAAMoB,IAAN,CAAW,aAAX,CARF,GASE,IATF,GAUEpB,MAAMoB,IAAN,CAAW,8EAAX,CAVF,GAWE,IAXF,GAYEpB,MAAMoB,IAAN,CAAW,8EAAX,CAZF,GAaE,IAbF,GAcE,IAdF,GAeE,sEAfF,GAgBE,IAhBF,GAiBE,IAjBF,GAkBE,uDAlBF,GAmBE,IAnBF,GAoBE,oEApBF,GAqBE,IArBF,GAsBE,IAtBF,GAuBEC,OAAOC,IAAP,CAAYL,QAAQhB,QAApB,EAA8BsB,GAA9B,CAAkC;AAAA,eAAQ,OAAOC,IAAP,GAAc,IAAd,GAAqBP,QAAQhB,QAAR,CAAiBuB,IAAjB,CAArB,GAA8C,IAAtD;AAAA,OAAlC,CAvBF,GAwBE,IAxBF,GAyBE,6EAzBF,GA0BE,IA1BF,GA2BE,IA3BF,GA4BExB,MAAMyB,MAAN,CACE,yGADF,CA5BF,GA+BE,IAhCJ;;AAmCAZ,eAASC,IAAT,EAAe,EAAEG,OAAF,EAAWV,QAAX,EAAf,EAAsC,UAACG,GAAD,EAAMgB,SAAN,EAAoB;AACxD,YAAKhB,OAAOA,IAAIiB,OAAJ,IAAe,UAAvB,IAAuCD,aAAaA,UAAUE,OAAV,KAAsB,KAA9E,EAAsF;AACpFV,kBAAQC,GAAR,CAAY,yCAAZ;AACAU,kBAAQjB,IAAR,CAAa,CAAb;AACD;AACD,YAAIF,GAAJ,EAASE,KAAK,uCAAL,EAA8CF,GAA9C;;AAET,YAAIhB,GAAGoC,UAAH,CAAcJ,UAAUK,UAAxB,CAAJ,EAAyC;AACvCvC,gBAAM,yDAAN;AACD,SAFD,MAEO;AACLA,gBAAM,+DAAN;AACAE,aAAGsC,SAAH,CAAaN,UAAUK,UAAvB;AACAvC,gBAAM,0BAA0BkC,UAAUK,UAApC,GAAiD,oBAAvD;AACD;;AAED,YAAIrC,GAAGoC,UAAH,CAAcjC,KAAKY,IAAL,CAAUiB,UAAUK,UAApB,EAAgC,cAAhC,CAAd,CAAJ,EAAoE;AAClEvC,gBAAM,qEAAN;AACD,SAFD,MAEO;AACLA,gBAAM,oEAAN;AACAE,aAAGuC,aAAH,CAAiBpC,KAAKY,IAAL,CAAUiB,UAAUK,UAApB,EAAgC,cAAhC,CAAjB,EAAkEG,KAAKC,SAAL,CAAe,EAAEC,SAAS,IAAX,EAAf,CAAlE,EAAqG,OAArG;AACA5C,gBAAM,wCAAwCkC,UAAUK,UAAlD,GAA+D,iCAArE;AACD;;AAED;AACA,YAAMM,UAAUR,QAAQS,GAAR,EAAhB;AACA,YAAI;AACFT,kBAAQU,KAAR,CAAcb,UAAUK,UAAxB;AACD,SAFD,CAEE,OAAOrB,GAAP,EAAY;AACZE,eAAK,kCAAL,EAAyCF,GAAzC;AACD;AACDT,iBAASuC,OAAT,CAAiB,EAAEC,OAAOxB,QAAQhB,QAAjB,EAA2B8B,YAAYL,UAAUK,UAAjD,EAA6DzB,IAA7D,EAAjB,EAAsF,UAACI,GAAD,EAAMgC,SAAN,EAAoB;AACxG,cAAIhC,GAAJ,EAAS,OAAOE,KAAK,mCAAL,EAA0CF,GAA1C,CAAP;AACT;AACA;;AAEA;AACA,cAAI;AACFmB,oBAAQU,KAAR,CAAcF,OAAd;AACD,WAFD,CAEE,OAAO3B,GAAP,EAAY;AACZE,iBAAK,kCAAL,EAAyCF,GAAzC;AACD;;AAEDR,qBAAWyC,MAAX,CACED,UAAUnB,GAAV,CAAc;AAAA,gBAAGqB,IAAH,SAAGA,IAAH;AAAA,gBAAoBC,SAApB,SAAS5B,OAAT,CAAoB4B,SAApB;AAAA,mBAAuC,EAAED,IAAF,EAAQC,SAAR,EAAvC;AAAA,WAAd,CADF,EAEEnB,UAAUK,UAFZ,EAGE,UAACrB,GAAD,EAAMoC,QAAN,EAAmB;AACjB,gBAAIpC,GAAJ,EAASE,KAAK,oCAAL,EAA2CF,GAA3C;AACTlB,kBAAM,UAAN,EAAkBsD,QAAlB;;AAEA5B,oBAAQC,GAAR,CACE,OACEnB,MAAMoB,IAAN,CAAW,8EAAX,CADF,GAEE,IAFF,GAGEpB,MAAMoB,IAAN,CAAW,8EAAX,CAHF,GAIE,IAJF,GAKEpB,MAAMoB,IAAN,CAAW,aAAX,CALF,GAME,wDANF,GAOEpB,MAAMoB,IAAN,CAAW,aAAX,CAPF,GAQE,IARF,GASEpB,MAAMoB,IAAN,CAAW,aAAX,CATF,GAUE,iBAVF,GAWEpB,MAAMyB,MAAN,CAAa,eAAb,CAXF,GAYE,4BAZF,GAaEzB,MAAMoB,IAAN,CAAW,aAAX,CAbF,GAcE,IAdF,GAeEpB,MAAMoB,IAAN,CAAW,8EAAX,CAfF,GAgBE,IAhBF,GAiBEpB,MAAMoB,IAAN,CAAW,8EAAX,CAjBF,GAkBE,IAnBJ;;AAsBA;AACA;;AAEA;AACD,WAjCH;AAmCD,SA/CD;AAgDD,OA9ED;;AAgFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KAvID,MAuIO;AACLF,cAAQ6B,KAAR,CACE,2GADF;AAGAlB,cAAQjB,IAAR,CAAa,CAAb,EAAgB,EAAhB;AACD;AACF,GA/ID;AAgJD;;AAED,IAAMA,OAAO,SAAPA,IAAO,CAACe,OAAD,EAAUoB,KAAV,EAAoB;AAC/B;AACE7B,YAAQC,GAAR,CAAYnB,MAAMgD,GAAN,CAAU,OAAOrB,OAAP,GAAiB,IAA3B,CAAZ;AACA,QAAIoB,KAAJ,EAAW7B,QAAQC,GAAR,CAAY,OAAZ,EAAqB4B,KAArB;AACX7B,YAAQC,GAAR,CACEnB,MAAMoB,IAAN,CAAW,0EAAX,IACEpB,MAAMgD,GAAN,CACE,8LADF,CAFJ;AAMAnB,YAAQjB,IAAR,CAAa,CAAb;AACD;AACF,CAZD;;AAcAqC,OAAOC,OAAP,CAAe/C,IAAf,GAAsBA,IAAtB","file":"init.js","sourcesContent":["const debug = require('debug')('docsmith:init');\nconst fs = require('fs-extra');\nconst read = require('fs').readFileSync;\nconst path = require('path');\n// var npmi = require('npmi');\nconst yaml = require('js-yaml').safeLoad;\n\nconst chalk = require('chalk');\nrequire('longjohn');\n\nconst packages = require('./packages');\nconst workspaces = require('./workspaces');\n\nfunction init({ template, config, link, defaults }) {\n  // Content as code CLI tool (i.e. not the bare `content` command)\n  fs.pathExists(path.join(config, './content.yml'), (err, exists) => {\n    if (err) return exit('Error while checking if content.yml exists', err); // => null\n    if (exists) {\n      // There is a content.yml file.\n      if (template) {\n        // TODO: Deal with instance templates\n        return exit('\\nError while initialising: template instances are not yet supported');\n      }\n      const promzard = require('promzard');\n      const file = path.resolve(__dirname, './utils/prompt.js');\n      const content = yaml(read(path.join(config, './content.yml'), 'utf8'));\n\n      console.log(\n        '\\n' +\n          '\\n' +\n          chalk.grey('============================================================================') +\n          '\\n' +\n          chalk.grey('===========                                                      ===========') +\n          '\\n' +\n          chalk.grey('===========') +\n          '            SAFETAG Toolkit Initialisation            ' +\n          chalk.grey('===========') +\n          '\\n' +\n          chalk.grey('===========                                                      ===========') +\n          '\\n' +\n          chalk.grey('============================================================================') +\n          '\\n' +\n          '\\n' +\n          'This script will initialise the current directory as your workspace.' +\n          '\\n' +\n          '\\n' +\n          'It will also update your global `.content` repository' +\n          '\\n' +\n          'and install the following content packages and their dependencies:' +\n          '\\n' +\n          '\\n' +\n          Object.keys(content.packages).map(repo => '\\t' + repo + ': ' + content.packages[repo] + '\\n') +\n          '\\n' +\n          \"Please answer a few questions below and you'll be up and running in no time\" +\n          '\\n' +\n          '\\n' +\n          chalk.yellow(\n            'NOTE: This is a prototype, please accept defaults by hitting enter\\n or hit Ctrl-C at any time to exit.'\n          ) +\n          '\\n'\n      );\n\n      promzard(file, { content, defaults }, (err, responses) => {\n        if ((err && err.message == 'canceled') || (responses && responses.confirm !== 'yes')) {\n          console.log('\\nExiting without initialising. See ya!');\n          process.exit(0);\n        }\n        if (err) exit('Error while processing prompt results', err);\n\n        if (fs.existsSync(responses.repository)) {\n          debug('> Content repository folder already exists. Continuing.');\n        } else {\n          debug('> Content repository folder does not exists. Creating folder.');\n          fs.mkdirSync(responses.repository);\n          debug('> Content repository ' + responses.repository + ' has been created.');\n        }\n\n        if (fs.existsSync(path.join(responses.repository, 'package.json'))) {\n          debug('> Content repository configuration file already exists. Continuing.');\n        } else {\n          debug('> Content repository configuration file does not exists. Creating.');\n          fs.writeFileSync(path.join(responses.repository, 'package.json'), JSON.stringify({ private: true }), 'utf-8');\n          debug('> Content repository configuration ' + responses.repository + '/package.json has been created.');\n        }\n\n        // Change working directory temporarily as npm api is insufficient.\n        const current = process.cwd();\n        try {\n          process.chdir(responses.repository);\n        } catch (err) {\n          exit('\\nError while changing directory', err);\n        }\n        packages.install({ repos: content.packages, repository: responses.repository, link }, (err, installed) => {\n          if (err) return exit('\\nError while installing packages', err);\n          // console.log('Content packages installed:' + JSON.stringify(installed));\n          // Deploying worksaces\n\n          // restore working directory\n          try {\n            process.chdir(current);\n          } catch (err) {\n            exit('\\nError while changing directory', err);\n          }\n\n          workspaces.deploy(\n            installed.map(({ name, content: { workspace } }) => ({ name, workspace })),\n            responses.repository,\n            (err, deployed) => {\n              if (err) exit('\\nError while deploying workspaces', err);\n              debug('deployed', deployed);\n\n              console.log(\n                '\\n' +\n                  chalk.grey('============================================================================') +\n                  '\\n' +\n                  chalk.grey('===========                                                      ===========') +\n                  '\\n' +\n                  chalk.grey('===========') +\n                  '        Initialisation complete.                      ' +\n                  chalk.grey('===========') +\n                  '\\n' +\n                  chalk.grey('===========') +\n                  '         - use ' +\n                  chalk.yellow('safetag start') +\n                  ' to open the toolkit      ' +\n                  chalk.grey('===========') +\n                  '\\n' +\n                  chalk.grey('===========                                                      ===========') +\n                  '\\n' +\n                  chalk.grey('============================================================================') +\n                  '\\n'\n              );\n\n              // I'll want to save the location of the workspace to the content repo to allow\n              // launching `safetag start` from anywhere.\n\n              return;\n            }\n          );\n        });\n      });\n\n      //   - Use `safetag-toolkit` as its default init mode.\n      //   - npm install `content.yml` dependencies in `~/.content/packages`\n      //   - `bootstrap`\n      //     - version controlled staging directory\n      //       - ask about fork origin remote.\n      //         - if no entry then point to doc and setup only `upstream` remote\n      //       - create git repo in `~/.content/staging/@safetag/*` for each dependent modules and publication containers.\n      //       - content.yml manages versions?\n      //     - working directory\n      //       - render taxonomy from `content` folder in `toolkit` package. (metalsmith workspace deploy config)\n    } else {\n      console.error(\n        'Error: CLI tool does not have a content.yml configuration file. Please report the error to the developer.'\n      );\n      process.exit(1, '');\n    }\n  });\n}\n\nconst exit = (message, error) => {\n  {\n    console.log(chalk.red('\\n' + message + '\\n'));\n    if (error) console.log('error', error);\n    console.log(\n      chalk.grey('\\n==================================================================\\n\\n') +\n        chalk.red(\n          'Please alert the developer by submitting an issue \\nat https://github.com/contentascode/safetag/issues and copy the whole output of the command above.\\n\\nApologies for the inconvenience!\\n'\n        )\n    );\n    process.exit(0);\n  }\n};\n\nmodule.exports.init = init;\n"]}