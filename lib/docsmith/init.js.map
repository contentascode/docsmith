{"version":3,"sources":["../../src/docsmith/init.js"],"names":["debug","require","fs","read","readFileSync","path","yaml","safeLoad","chalk","settings","packages","workspaces","pad","string","char","length","repeat","slice","init","template","config","link","defaults","verbose","pathExists","join","err","exists","exit","promzard","file","resolve","__dirname","content","console","log","grey","description","instance","Object","keys","map","repo","yellow","responses","message","confirm","process","existsSync","repository","mkdirSync","pkgs","current","cwd","chdir","install","installed","deploy","name","workspace","deployed","error","red","module","exports","run"],"mappings":"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","file":"init.js","sourcesContent":["const debug = require('debug')('docsmith:init');\nconst fs = require('fs-extra');\nconst read = require('fs').readFileSync;\nconst path = require('path');\n// var npmi = require('npmi');\nconst yaml = require('js-yaml').safeLoad;\n\nconst chalk = require('chalk');\nrequire('longjohn');\n\nconst settings = require('./utils/settings');\nconst packages = require('./init/packages');\nconst workspaces = require('./init/workspaces');\n\nconst pad = (string, char, length) => (string + char.repeat(length)).slice(0, length);\n\nfunction init({ template, config, link, defaults, verbose }) {\n  // Content as code CLI tool (i.e. not the bare `content` command)\n  fs.pathExists(path.join(config, './content.yml'), (err, exists) => {\n    if (err) return exit('Error while checking if content.yml exists', err); // => null\n    if (exists) {\n      // There is a content.yml file.\n      if (template) {\n        // TODO: Deal with instance templates\n        return exit('\\nError while initialising: template instances are not yet supported');\n      }\n      const promzard = require('promzard');\n      const file = path.resolve(__dirname, './utils/prompt.js');\n      const content = yaml(read(path.join(config, './content.yml'), 'utf8'));\n\n      console.log(\n        '\\n' +\n          '\\n' +\n          chalk.grey('============================================================================') +\n          '\\n' +\n          chalk.grey('===========                                                      ===========') +\n          '\\n' +\n          chalk.grey('===========') +\n          '            ' +\n          pad((settings.description || settings.instance) + ' Initialisation', ' ', 42) +\n          chalk.grey('===========') +\n          '\\n' +\n          chalk.grey('===========                                                      ===========') +\n          '\\n' +\n          chalk.grey('============================================================================') +\n          '\\n' +\n          '\\n' +\n          'This script will initialise the current directory as your workspace.' +\n          '\\n' +\n          '\\n' +\n          'It will also update your global `.content` repository' +\n          '\\n' +\n          'and install the following content packages and their dependencies:' +\n          '\\n' +\n          '\\n' +\n          Object.keys(content.packages).map(repo => '\\t' + repo + ': ' + content.packages[repo] + '\\n') +\n          '\\n' +\n          \"Please answer a few questions below and you'll be up and running in no time\" +\n          '\\n' +\n          '\\n' +\n          chalk.yellow(\n            'NOTE: This is a prototype, please accept defaults by hitting enter\\n or hit Ctrl-C at any time to exit.'\n          ) +\n          '\\n'\n      );\n\n      promzard(file, { content, defaults }, (err, responses) => {\n        if ((err && err.message == 'canceled') || (responses && responses.confirm !== 'yes')) {\n          console.log('\\nExiting without initialising. See ya!');\n          process.exit(0);\n        }\n        if (err) exit('Error while processing prompt results', err);\n\n        fs.existsSync(responses.repository) || fs.mkdirSync(responses.repository);\n        debug('> Content repository: ', responses.repository);\n\n        const pkgs = path.join(responses.repository, 'packages');\n        fs.existsSync(pkgs) || fs.mkdirSync(pkgs);\n        debug('> Content packages directory: ', pkgs);\n\n        // Change working directory temporarily as npm api is insufficient.\n        const current = process.cwd();\n        try {\n          process.chdir(pkgs);\n          debug('changed directory: ', pkgs);\n        } catch (err) {\n          exit('\\nError while changing directory', err);\n        }\n        packages.install(\n          { packages: content.packages, repository: responses.repository, link, verbose },\n          (err, installed) => {\n            if (err) return exit('\\nError while installing packages', err);\n            // console.log('Content packages installed:' + JSON.stringify(installed));\n            // Deploying worksaces\n\n            // restore working directory\n            try {\n              process.chdir(current);\n              debug('changed directory: ', current);\n            } catch (err) {\n              exit('\\nError while changing directory', err);\n            }\n\n            workspaces.deploy(\n              installed.map(({ name, content: { workspace } }) => ({ name, workspace })),\n              responses.repository,\n              (err, deployed) => {\n                if (err) exit('\\nError while deploying workspaces', err);\n                debug('deployed', deployed);\n\n                console.log(\n                  '\\n' +\n                    chalk.grey('============================================================================') +\n                    '\\n' +\n                    chalk.grey('===========                                                      ===========') +\n                    '\\n' +\n                    chalk.grey('===========') +\n                    '   Initialisation complete.                           ' +\n                    chalk.grey('===========') +\n                    '\\n' +\n                    chalk.grey('===========') +\n                    '   - use ' +\n                    chalk.yellow(settings.instance + ' start') +\n                    pad(' to open the ' + settings.description, ' ', 19 + (settings.instance + ' start').length) +\n                    chalk.grey('===========') +\n                    '\\n' +\n                    chalk.grey('===========                                                      ===========') +\n                    '\\n' +\n                    chalk.grey('============================================================================') +\n                    '\\n'\n                );\n\n                // I'll want to save the location of the workspace to the content repo to allow\n                // launching `safetag start` from anywhere.\n\n                return;\n              }\n            );\n          }\n        );\n      });\n\n      //   - Use `safetag-toolkit` as its default init mode.\n      //   - npm install `content.yml` dependencies in `~/.content/packages`\n      //   - `bootstrap`\n      //     - version controlled staging directory\n      //       - ask about fork origin remote.\n      //         - if no entry then point to doc and setup only `upstream` remote\n      //       - create git repo in `~/.content/staging/@safetag/*` for each dependent modules and publication containers.\n      //       - content.yml manages versions?\n      //     - working directory\n      //       - render taxonomy from `content` folder in `toolkit` package. (metalsmith workspace deploy config)\n    } else {\n      console.error(\n        'Error: CLI tool does not have a content.yml configuration file. Please report the error to the developer.'\n      );\n      process.exit(1, '');\n    }\n  });\n}\n\nconst exit = (message, error) => {\n  {\n    console.log(chalk.red('\\n' + message + '\\n'));\n    if (error) console.log('error', error);\n    console.log(\n      chalk.grey('\\n==================================================================\\n\\n') +\n        chalk.red(\n          'Please alert the developer by submitting an issue \\nat https://github.com/contentascode/safetag/issues and copy the whole output of the command above.\\n\\nApologies for the inconvenience!\\n'\n        )\n    );\n    process.exit(1);\n  }\n};\n\nmodule.exports.run = init;\n"]}