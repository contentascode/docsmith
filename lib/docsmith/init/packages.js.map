{"version":3,"sources":["../../../src/docsmith/init/packages.js"],"names":["debug","require","fs","npm","async","yaml","safeLoad","toYaml","safeDump","read","readFileSync","path","install","done","repos","repository","link","length","reduce","Object","keys","map","name","repo","pkgs","callback","console","log","load","save","progress","loglevel","process","env","DEBUG","err","commands","code","error","pkgid","exists","pathExistsSync","join","content","exists_root_content","new_root_content","root_content","outputFileSync","packages","concat","results","module","exports"],"mappings":"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","file":"packages.js","sourcesContent":["const debug = require('debug')('docsmith:init');\nconst fs = require('fs-extra');\nconst npm = require('npm');\nconst async = require('async');\nconst yaml = require('js-yaml').safeLoad;\nconst toYaml = require('js-yaml').safeDump;\nconst read = require('fs').readFileSync;\nconst path = require('path');\n\n// If link is true then do not install the npm package and link a local version instead\nconst install = function install({ repos, repository, link }, done) {\n  if (!repos || repos.length == 0) return done();\n  async.reduce(\n    Object.keys(repos).map(name => ({ name, repo: repos[name] })),\n    [],\n    (pkgs, { name, repo }, callback) => {\n      if (link) {\n        debug('>> Linking content package: ' + name);\n      } else {\n        console.log('Installing', repo);\n        debug('>> Installing content package: ' + repo);\n      }\n\n      // link uses npm.globalDir to check for locally linked packages and npm.dir for the installation destination.\n      // npm.globalDir is a read only property based on globalPrefix\n      // npm.dir is a read only property based on npm.prefix\n      // npm.prefix\n      // link therefore needs both to be set but setting prefix manually overrides both...\n\n      npm.load({ save: false, progress: false, loglevel: process.env.DEBUG ? 'info' : 'silent' }, function(err) {\n        if (err) return err;\n        npm.commands[link ? 'link' : 'install']([link ? name : repo], function(err) {\n          if (err && err.code === 'E404') {\n            console.error('Could not find content package: ' + err.pkgid);\n            return callback(err);\n          }\n          if (err) {\n            console.error(err);\n            return callback(err);\n          }\n\n          const exists = fs.pathExistsSync(path.join(repository, 'node_modules', name, './content.yml'));\n          debug('>> Checking content.yml in package at ' +  path.join(repository, 'node_modules', name, './content.yml') + ':', exists);\n          // Skip if there is no content.yml in the installed package\n          if (!exists) return callback();\n\n          // Otherwise gather the content of the content.yml.\n          const content = yaml(read(path.join(repository, 'node_modules', name, './content.yml'), 'utf8'));\n\n          // copy the content.yml to the root of the content repo.\n          const exists_root_content = fs.pathExistsSync(path.join(repository, 'content.yml'));\n\n          let new_root_content;\n\n          if (exists_root_content) {\n            const root_content = yaml(read(path.join(repository, 'content.yml'), 'utf8'));\n            new_root_content = Object(root_content, content);\n            // TODO: merge in a smart way\n          } else {\n            new_root_content = content;\n          }\n\n          fs.outputFileSync(path.join(repository, 'content.yml'), toYaml(new_root_content), 'utf8');\n\n          debug('>> Recursively install content packages:', content.packages)\n          // recursively install content packages.\n          install({ repos: content.packages, repository, link }, err => {\n            if (err) return callback(err);\n            debug('>> Current pkgs:', pkgs)\n            debug('>> Returning pkg concatenated with:', { name, content })\n            // This should accumulate content packages dependencies in a flat structure.\n            return callback(null, pkgs.concat({ name, content }));\n          });\n        });\n      });\n    },\n    (err, results) => {\n      debug('results', results)\n      if (err) return done(err);\n      done(null, results);\n    }\n  );\n};\n\nmodule.exports.install = install;\n\n// var pnpm = require('supi');\n// module.exports.install = function(repos, prefix, done) {\n//   pnpm\n//     .installPkgs(repos, { prefix })\n//     .then((...res) =>\n//       async.forEach(\n//         repos,\n//         (repo, cb) => {\n//           console.log(repo);\n//         },\n//         done\n//       )\n//     )\n//     .catch(done);\n// };\n"]}