{"version":3,"sources":["../../../src/docsmith/init/packages.js"],"names":["debug","require","fs","npm","async","yaml","safeLoad","toYaml","safeDump","read","readFileSync","path","install","done","packages","repository","link","verbose","length","reduce","Object","keys","map","name","pkg","pkgs","callback","existsSync","mkdirSync","process","chdir","err","writeFileSync","join","cwd","JSON","stringify","private","console","log","load","save","progress","loglevel","commands","code","error","pkgid","copySync","exists","pathExistsSync","content","exists_root_content","new_root_content","root_content","outputFileSync","repos","concat","results","module","exports"],"mappings":";;AAAA,IAAMA,QAAQC,QAAQ,OAAR,EAAiB,eAAjB,CAAd;AACA,IAAMC,KAAKD,QAAQ,UAAR,CAAX;AACA,IAAME,MAAMF,QAAQ,KAAR,CAAZ;AACA,IAAMG,QAAQH,QAAQ,OAAR,CAAd;AACA,IAAMI,OAAOJ,QAAQ,SAAR,EAAmBK,QAAhC;AACA,IAAMC,SAASN,QAAQ,SAAR,EAAmBO,QAAlC;AACA,IAAMC,OAAOR,QAAQ,IAAR,EAAcS,YAA3B;AACA,IAAMC,OAAOV,QAAQ,MAAR,CAAb;;AAEA;AACA,IAAMW,UAAU,SAASA,OAAT,OAA0DC,IAA1D,EAAgE;AAAA,MAA7CC,QAA6C,QAA7CA,QAA6C;AAAA,MAAnCC,UAAmC,QAAnCA,UAAmC;AAAA,MAAvBC,IAAuB,QAAvBA,IAAuB;AAAA,MAAjBC,OAAiB,QAAjBA,OAAiB;;AAC9EjB,QAAM,UAAN,EAAkBc,QAAlB;AACAd,QAAM,YAAN,EAAoBe,UAApB;AACA,MAAI,CAACD,QAAD,IAAaA,SAASI,MAAT,IAAmB,CAApC,EAAuC,OAAOL,MAAP;AACvCT,QAAMe,MAAN,CACEC,OAAOC,IAAP,CAAYP,QAAZ,EAAsBQ,GAAtB,CAA0B;AAAA,WAAS,EAAEC,IAAF,EAAQC,KAAKV,SAASS,IAAT,CAAb,EAAT;AAAA,GAA1B,CADF,EAEE,EAFF,EAGE,UAACE,IAAD,SAAsBC,QAAtB,EAAmC;AAAA,QAA1BH,IAA0B,SAA1BA,IAA0B;AAAA,QAApBC,GAAoB,SAApBA,GAAoB;;AACjCtB,OAAGyB,UAAH,CAAcJ,IAAd,KAAuBrB,GAAG0B,SAAH,CAAaL,IAAb,CAAvB;AACA,QAAI;AACFM,cAAQC,KAAR,CAAcP,IAAd;AACAvB,YAAM,qBAAN,EAA6BuB,IAA7B;AACD,KAHD,CAGE,OAAOQ,GAAP,EAAY;AACZlB,WAAK,uCAAuCU,IAA5C;AACD;;AAED;AACArB,OAAG8B,aAAH,CAAiBrB,KAAKsB,IAAL,CAAUJ,QAAQK,GAAR,EAAV,EAAyB,cAAzB,CAAjB,EAA2DC,KAAKC,SAAL,CAAe,EAAEC,SAAS,IAAX,EAAf,CAA3D,EAA8F,OAA9F;AACArC,UAAM,sCAAN,EAA8CuB,OAAO,eAArD;;AAEA,QAAIP,IAAJ,EAAU;AACRhB,YAAM,iCAAiCuB,IAAvC;AACD,KAFD,MAEO;AACLe,cAAQC,GAAR,CAAY,YAAZ,EAA0Bf,GAA1B;AACAxB,YAAM,oCAAoCwB,GAA1C;AACD;;AAED;AACA;AACA;AACA;AACA;;AAEArB,QAAIqC,IAAJ,CAAS,EAAEC,MAAM,KAAR,EAAeC,UAAU,KAAzB,EAAgCC,UAAU1B,UAAU,MAAV,GAAmB,QAA7D,EAAT,EAAkF,UAASc,GAAT,EAAc;AAC9F,UAAIA,GAAJ,EAAS,OAAOA,GAAP;AACT5B,UAAIyC,QAAJ,CAAa5B,OAAO,MAAP,GAAgB,SAA7B,EAAwC,CAACA,OAAOO,IAAP,GAAcC,GAAf,CAAxC,EAA6D,UAASO,GAAT,EAAc;AACzE,YAAIA,OAAOA,IAAIc,IAAJ,KAAa,MAAxB,EAAgC;AAC9BP,kBAAQQ,KAAR,CAAc,qCAAqCf,IAAIgB,KAAvD;AACA,iBAAOrB,SAASK,GAAT,CAAP;AACD;AACD,YAAIA,GAAJ,EAAS;AACPO,kBAAQQ,KAAR,CAAcf,GAAd;AACA,iBAAOL,SAASK,GAAT,CAAP;AACD;;AAED;AACA7B,WAAG8C,QAAH,CACErC,KAAKsB,IAAL,CAAUlB,UAAV,EAAsB,UAAtB,EAAkCQ,IAAlC,EAAwC,cAAxC,EAAwDA,IAAxD,CADF,EAEEZ,KAAKsB,IAAL,CAAUlB,UAAV,EAAsB,UAAtB,EAAkCQ,IAAlC,CAFF;;AAKA,YAAM0B,SAAS/C,GAAGgD,cAAH,CAAkBvC,KAAKsB,IAAL,CAAUlB,UAAV,EAAsB,UAAtB,EAAkCQ,IAAlC,EAAwC,eAAxC,CAAlB,CAAf;AACAvB,cACE,2CAA2CW,KAAKsB,IAAL,CAAUlB,UAAV,EAAsB,UAAtB,EAAkCQ,IAAlC,EAAwC,eAAxC,CAA3C,GAAsG,GADxG,EAEE0B,MAFF;AAIA;AACA,YAAI,CAACA,MAAL,EAAa,OAAOvB,UAAP;;AAEb;AACA,YAAMyB,UAAU9C,KAAKI,KAAKE,KAAKsB,IAAL,CAAUlB,UAAV,EAAsB,UAAtB,EAAkCQ,IAAlC,EAAwC,eAAxC,CAAL,EAA+D,MAA/D,CAAL,CAAhB;;AAEA;AACA,YAAM6B,sBAAsBlD,GAAGgD,cAAH,CAAkBvC,KAAKsB,IAAL,CAAUlB,UAAV,EAAsB,aAAtB,CAAlB,CAA5B;;AAEA,YAAIsC,yBAAJ;;AAEA,YAAID,mBAAJ,EAAyB;AACvB,cAAME,eAAejD,KAAKI,KAAKE,KAAKsB,IAAL,CAAUlB,UAAV,EAAsB,aAAtB,CAAL,EAA2C,MAA3C,CAAL,CAArB;AACAsC,6BAAmBjC,OAAOkC,YAAP,EAAqBH,OAArB,CAAnB;AACA;AACD,SAJD,MAIO;AACLE,6BAAmBF,OAAnB;AACD;;AAEDjD,WAAGqD,cAAH,CAAkB5C,KAAKsB,IAAL,CAAUlB,UAAV,EAAsB,aAAtB,CAAlB,EAAwDR,OAAO8C,gBAAP,CAAxD,EAAkF,MAAlF;;AAEArD,cAAM,0CAAN,EAAkDmD,QAAQrC,QAA1D;AACA;AACAF,gBAAQ,EAAE4C,OAAOL,QAAQrC,QAAjB,EAA2BC,UAA3B,EAAuCC,IAAvC,EAAR,EAAuD,eAAO;AAC5D,cAAIe,GAAJ,EAAS,OAAOL,SAASK,GAAT,CAAP;AACT/B,gBAAM,kBAAN,EAA0ByB,IAA1B;AACAzB,gBAAM,qCAAN,EAA6C,EAAEuB,IAAF,EAAQ4B,OAAR,EAA7C;AACA;AACA,iBAAOzB,SAAS,IAAT,EAAeD,KAAKgC,MAAL,CAAY,EAAElC,IAAF,EAAQ4B,OAAR,EAAZ,CAAf,CAAP;AACD,SAND;AAOD,OAnDD;AAoDD,KAtDD;AAuDD,GApFH,EAqFE,UAACpB,GAAD,EAAM2B,OAAN,EAAkB;AAChB1D,UAAM,SAAN,EAAiB0D,OAAjB;AACA,QAAI3B,GAAJ,EAAS,OAAOlB,KAAKkB,GAAL,CAAP;AACTlB,SAAK,IAAL,EAAW6C,OAAX;AACD,GAzFH;AA2FD,CA/FD;;AAiGAC,OAAOC,OAAP,CAAehD,OAAf,GAAyBA,OAAzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"packages.js","sourcesContent":["const debug = require('debug')('docsmith:init');\nconst fs = require('fs-extra');\nconst npm = require('npm');\nconst async = require('async');\nconst yaml = require('js-yaml').safeLoad;\nconst toYaml = require('js-yaml').safeDump;\nconst read = require('fs').readFileSync;\nconst path = require('path');\n\n// If link is true then do not install the npm package and link a local version instead\nconst install = function install({ packages, repository, link, verbose }, done) {\n  debug('packages', packages);\n  debug('repository', repository);\n  if (!packages || packages.length == 0) return done();\n  async.reduce(\n    Object.keys(packages).map(name => ({ name, pkg: packages[name] })),\n    [],\n    (pkgs, { name, pkg }, callback) => {\n      fs.existsSync(name) || fs.mkdirSync(name);\n      try {\n        process.chdir(name);\n        debug('changed directory: ', name);\n      } catch (err) {\n        done('\\nError while changing directory: ' + name);\n      }\n\n      // Create or overwrite package.json to enable desired folder structure\n      fs.writeFileSync(path.join(process.cwd(), 'package.json'), JSON.stringify({ private: true }), 'utf-8');\n      debug('> Content repository configuration: ', name + '/package.json');\n\n      if (link) {\n        debug('>> Linking content package: ' + name);\n      } else {\n        console.log('Installing', pkg);\n        debug('>> Installing content package: ' + pkg);\n      }\n\n      // link uses npm.globalDir to check for locally linked packages and npm.dir for the installation destination.\n      // npm.globalDir is a read only property based on globalPrefix\n      // npm.dir is a read only property based on npm.prefix\n      // npm.prefix\n      // link therefore needs both to be set but setting prefix manually overrides both...\n\n      npm.load({ save: false, progress: false, loglevel: verbose ? 'info' : 'silent' }, function(err) {\n        if (err) return err;\n        npm.commands[link ? 'link' : 'install']([link ? name : pkg], function(err) {\n          if (err && err.code === 'E404') {\n            console.error('Could not find content package: ' + err.pkgid);\n            return callback(err);\n          }\n          if (err) {\n            console.error(err);\n            return callback(err);\n          }\n\n          // Copy module files to the content package root.\n          fs.copySync(\n            path.join(repository, 'packages', name, 'node_modules', name),\n            path.join(repository, 'packages', name)\n          );\n\n          const exists = fs.pathExistsSync(path.join(repository, 'packages', name, './content.yml'));\n          debug(\n            '>> Checking content.yml in package at ' + path.join(repository, 'packages', name, './content.yml') + ':',\n            exists\n          );\n          // Skip if there is no content.yml in the installed package\n          if (!exists) return callback();\n\n          // Otherwise gather the content of the content.yml.\n          const content = yaml(read(path.join(repository, 'packages', name, './content.yml'), 'utf8'));\n\n          // copy the content.yml to the root of the content repo.\n          const exists_root_content = fs.pathExistsSync(path.join(repository, 'content.yml'));\n\n          let new_root_content;\n\n          if (exists_root_content) {\n            const root_content = yaml(read(path.join(repository, 'content.yml'), 'utf8'));\n            new_root_content = Object(root_content, content);\n            // TODO: merge in a smart way\n          } else {\n            new_root_content = content;\n          }\n\n          fs.outputFileSync(path.join(repository, 'content.yml'), toYaml(new_root_content), 'utf8');\n\n          debug('>> Recursively install content packages:', content.packages);\n          // recursively install content packages.\n          install({ repos: content.packages, repository, link }, err => {\n            if (err) return callback(err);\n            debug('>> Current pkgs:', pkgs);\n            debug('>> Returning pkg concatenated with:', { name, content });\n            // This should accumulate content packages dependencies in a flat structure.\n            return callback(null, pkgs.concat({ name, content }));\n          });\n        });\n      });\n    },\n    (err, results) => {\n      debug('results', results);\n      if (err) return done(err);\n      done(null, results);\n    }\n  );\n};\n\nmodule.exports.install = install;\n\n// var pnpm = require('supi');\n// module.exports.install = function(repos, prefix, done) {\n//   pnpm\n//     .installPkgs(repos, { prefix })\n//     .then((...res) =>\n//       async.forEach(\n//         repos,\n//         (repo, cb) => {\n//           console.log(repo);\n//         },\n//         done\n//       )\n//     )\n//     .catch(done);\n// };\n"]}