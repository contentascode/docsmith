{"version":3,"sources":["../../../src/docsmith/init/workspaces.js"],"names":["debug","require","async","realPath","realpathSync","path","metalsmith","deploy","workspaces","repository","done","process","cwd","reduce","memo","callback","name","workspace","base","join","eachOfSeries","cb","init","console","log","destination","err","res","results","module","exports"],"mappings":";;AAAA,IAAMA,QAAQC,QAAQ,OAAR,EAAiB,eAAjB,CAAd;AACA,IAAMC,QAAQD,QAAQ,OAAR,CAAd;AACA,IAAME,WAAWF,QAAQ,IAAR,EAAcG,YAA/B;AACA,IAAMC,OAAOJ,QAAQ,MAAR,CAAb;AACA,IAAMK,aAAaL,QAAQ,qBAAR,CAAnB;;AAEA,IAAMM,SAAS,SAASA,MAAT,CAAgBC,UAAhB,EAA4BC,UAA5B,EAAwCC,IAAxC,EAA8C;AAC3DV,QAAM,YAAN,EAAoBQ,UAApB;AACAR,QAAM,YAAN,EAAoBS,UAApB;AACAT,QAAM,KAAN,EAAaW,QAAQC,GAAR,EAAb;AACAV,QAAMW,MAAN,CACEL,UADF,EAEE,EAFF,EAGE,UAACM,IAAD,QAA4BC,QAA5B,EAAyC;AAAA,QAAhCC,IAAgC,QAAhCA,IAAgC;AAAA,QAA1BC,SAA0B,QAA1BA,SAA0B;;AACvC;AACA;AACA;AACA,QAAMC,OAAOf,SAASE,KAAKc,IAAL,CAAUV,UAAV,EAAsB,UAAtB,EAAkCO,IAAlC,CAAT,CAAb;AACA;AACAd,UAAMkB,YAAN,CACEH,SADF,EAEE,iBAAWD,IAAX,EAAiBK,EAAjB,EAAwB;AAAA,UAArBC,IAAqB,SAArBA,IAAqB;;AACtB;AACA;AACA;AACA,UAAI,CAACA,IAAL,EAAW,OAAOD,IAAP;AACXE,cAAQC,GAAR,CAAY,0BAAZ,EAAwCR,IAAxC;AACAV,iBAAWD,KAAKc,IAAL,CAAUD,IAAV,EAAgBI,IAAhB,CAAX,EAAkC,EAAEG,aAAapB,KAAKc,IAAL,CAAUR,QAAQC,GAAR,EAAV,EAAyBI,IAAzB,CAAf,EAAlC,EAAmF,eAAO;AACxF,YAAIU,GAAJ,EAAS;AACPH,kBAAQC,GAAR,CAAY,iBAAZ,EAA+BR,IAA/B;AACA,iBAAOK,GAAGK,GAAH,CAAP;AACD;AACD1B,cAAM,yBAAN,EAAiCgB,IAAjC;;AAEA,eAAOK,IAAP;AACD,OARD;AASD,KAjBH,EAkBE,UAACK,GAAD,EAAMC,GAAN,EAAc;AACZ;AACA,aAAOZ,SAASW,GAAT,EAAcC,GAAd,CAAP;AACD,KArBH;AAuBD,GAhCH,EAiCE,UAACD,GAAD,EAAME,OAAN,EAAkB;AAChB,QAAIF,GAAJ,EAAS,OAAOhB,KAAKgB,GAAL,CAAP;AACT,WAAOhB,KAAK,IAAL,EAAWkB,OAAX,CAAP;AACD,GApCH;AAsCD,CA1CD;;AA4CAC,OAAOC,OAAP,CAAevB,MAAf,GAAwBA,MAAxB","file":"workspaces.js","sourcesContent":["const debug = require('debug')('docsmith:init');\nconst async = require('async');\nconst realPath = require('fs').realpathSync;\nconst path = require('path');\nconst metalsmith = require('../utils/metalsmith');\n\nconst deploy = function deploy(workspaces, repository, done) {\n  debug('workspaces', workspaces);\n  debug('repository', repository);\n  debug('pwd', process.cwd());\n  async.reduce(\n    workspaces,\n    [],\n    (memo, { name, workspace }, callback) => {\n      // This should execute the init script of the workspace\n      // via metalsmith programmatically with the .content folder as source and\n      // the destination in pwd.\n      const base = realPath(path.join(repository, 'packages', name));\n      // console.log('base', base);\n      async.eachOfSeries(\n        workspace,\n        ({ init }, name, cb) => {\n          // Skip if there isn't an init script in the workspace configuration.\n          // console.log('init', init);\n          // console.log('name', name);\n          if (!init) return cb();\n          console.log('>> Deploying workspace: ', name);\n          metalsmith(path.join(base, init), { destination: path.join(process.cwd(), name) }, err => {\n            if (err) {\n              console.log('Error deploying', name);\n              return cb(err);\n            }\n            debug('>> Finished deploying: ', name);\n\n            return cb();\n          });\n        },\n        (err, res) => {\n          // console.trace();\n          return callback(err, res);\n        }\n      );\n    },\n    (err, results) => {\n      if (err) return done(err);\n      return done(null, results);\n    }\n  );\n};\n\nmodule.exports.deploy = deploy;\n"]}