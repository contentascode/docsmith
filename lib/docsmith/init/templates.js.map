{"version":3,"sources":["../../../src/docsmith/init/templates.js"],"names":["debug","require","fs","path","npm","templates_path","join","dirname","realpathSync","__filename","init","template","copy","overwrite","errorOnExist","filter","f","basename","err","console","error","load","save","progress","commands","install","log","message","e","process","exit","module","exports"],"mappings":";;AAAA,IAAMA,QAAQC,QAAQ,OAAR,EAAiB,oBAAjB,CAAd;AACA,IAAMC,KAAKD,QAAQ,UAAR,CAAX;AACA,IAAME,OAAOF,QAAQ,MAAR,CAAb;AACA,IAAMG,MAAMH,QAAQ,KAAR,CAAZ;AACA;;AAEA;AACA,IAAMI,iBAAiBF,KAAKG,IAAL,CAAUH,KAAKI,OAAL,CAAaL,GAAGM,YAAH,CAAgBC,UAAhB,CAAb,CAAV,EAAqD,oBAArD,CAAvB;;AAEA,SAASC,IAAT,GAAuC;AAAA,MAAzBC,QAAyB,uEAAd,YAAc;;AACrC;AACA,MAAIA,YAAY,QAAZ,IAAwBA,YAAY,YAAxC,EAAsD;AACpD,QAAI;AACFX,YAAM,eAAN,EAAuBG,KAAKG,IAAL,CAAUD,cAAV,EAA0B,UAAUM,QAApC,CAAvB;AACAT,SAAGU,IAAH,CACET,KAAKG,IAAL,CAAUD,cAAV,EAA0B,UAAUM,QAApC,CADF,EAEE,GAFF,EAGE;AACEE,mBAAW,KADb;AAEEC,sBAAc,IAFhB;AAGEC,eAAOC,CAAP,EAAU;AACR,iBAAOb,KAAKc,QAAL,CAAcD,CAAd,KAAoB,MAA3B;AACD;AALH,OAHF,EAUE,UAASE,GAAT,EAAc;AACZ,YAAIA,GAAJ,EAAS,OAAOC,QAAQC,KAAR,CAAcF,GAAd,CAAP;AACTC,gBAAQC,KAAR,CAAc,+CAAd;AACA;AACAhB,YAAIiB,IAAJ,CAAS,EAAEC,MAAM,KAAR,EAAeC,UAAU,KAAzB,EAAT,EAA2C,UAASL,GAAT,EAAc;AACvD,cAAIA,GAAJ,EAAS,OAAOA,GAAP;AACTd,cAAIoB,QAAJ,CAAaC,OAAb,CAAqB,CAAC,GAAD,CAArB,EAA4B,UAASP,GAAT,EAAc;AACxC,gBAAIA,GAAJ,EAAS;AACPC,sBAAQO,GAAR,CAAY,yBAAyBR,IAAIS,OAAzC;AACD,aAFD,MAEO;AACLR,sBAAQO,GAAR,CAAY,EAAZ;AACAP,sBAAQO,GAAR,CAAY,wDAAwDf,QAAxD,GAAmE,YAA/E;AACAQ,sBAAQO,GAAR,CAAY,EAAZ;AACAP,sBAAQO,GAAR,CAAY,yDAAZ;AACAP,sBAAQO,GAAR,CAAY,EAAZ;AACAP,sBAAQO,GAAR,CAAY,gBAAZ;AACAP,sBAAQO,GAAR,CAAY,EAAZ;AACD;AACF,WAZD;AAaD,SAfD;AAgBD,OA9BH,EAFE,CAiCC;AACJ,KAlCD,CAkCE,OAAOE,CAAP,EAAU;AACVT,cAAQC,KAAR,CAAc,uCAAd,EAAuDT,QAAvD;AACAQ,cAAQC,KAAR,CAAcQ,CAAd;AACAC,cAAQC,IAAR,CAAa,CAAb,EAAgB,EAAhB;AACD;AACF,GAxCD,MAwCO;AACLX,YAAQC,KAAR,CAAc,kCAAd;AACAS,YAAQC,IAAR,CAAa,CAAb,EAAgB,EAAhB;AACD;AACF;;AAEDC,OAAOC,OAAP,CAAe7B,IAAf,GAAsBE,cAAtB;AACA0B,OAAOC,OAAP,CAAetB,IAAf,GAAsBA,IAAtB","file":"templates.js","sourcesContent":["const debug = require('debug')('docsmith:templates');\nconst fs = require('fs-extra');\nconst path = require('path');\nconst npm = require('npm');\n// var npmi = require('npmi');\n\n// TODO: Finalise making templates as packages\nconst templates_path = path.join(path.dirname(fs.realpathSync(__filename)), '../../../templates');\n\nfunction init(template = 'metalsmith') {\n  // Built in templates\n  if (template == 'jekyll' || template == 'metalsmith') {\n    try {\n      debug('template file', path.join(templates_path, 'init-' + template));\n      fs.copy(\n        path.join(templates_path, 'init-' + template),\n        '.',\n        {\n          overwrite: false,\n          errorOnExist: true,\n          filter(f) {\n            return path.basename(f) != '.git';\n          }\n        },\n        function(err) {\n          if (err) return console.error(err);\n          console.error('WARNING: Careful this probably does not work.');\n          // TODO: Finish converting to npm from npmi\n          npm.load({ save: false, progress: false }, function(err) {\n            if (err) return err;\n            npm.commands.install(['.'], function(err) {\n              if (err) {\n                console.log('Installation failed.' + err.message);\n              } else {\n                console.log('');\n                console.log('Content as Code project directory initialised with ' + template + ' template.');\n                console.log('');\n                console.log('You can find out about your current configuration with:');\n                console.log('');\n                console.log('content status');\n                console.log('');\n              }\n            });\n          });\n        }\n      ); // copies file\n    } catch (e) {\n      console.error('Error: Could not initialise template.', template);\n      console.error(e);\n      process.exit(1, '');\n    }\n  } else {\n    console.error('Error: Template not recognised .');\n    process.exit(1, '');\n  }\n}\n\nmodule.exports.path = templates_path;\nmodule.exports.init = init;\n"]}