{"version":3,"sources":["../../src/docsmith/content.js"],"names":["fs","require","read","readFileSync","path","yaml","safeLoad","npm","packages","workspaces","_","chalk","init","template","config","link","defaults","pathExists","join","err","exists","exit","promzard","file","resolve","__dirname","content","console","log","grey","Object","keys","map","repo","yellow","responses","message","confirm","process","existsSync","repository","mkdirSync","writeFileSync","JSON","stringify","private","current","cwd","chdir","install","repos","installed","deploy","name","workspace","deployed","error","red","module","exports"],"mappings":"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","file":"content.js","sourcesContent":["var fs = require('fs-extra');\nvar read = require('fs').readFileSync;\nvar path = require('path');\n// var npmi = require('npmi');\nvar yaml = require('js-yaml').safeLoad;\nvar npm = require('npm');\nvar packages = require('./packages');\nvar workspaces = require('./workspaces');\nvar _ = require('lodash');\nvar chalk = require('chalk');\nrequire('longjohn');\n\nfunction init({ template, config, link, defaults }) {\n  // Content as code CLI tool (i.e. not the bare `content` command)\n  fs.pathExists(path.join(config, './content.yml'), (err, exists) => {\n    if (err) return exit('Error while checking if content.yml exists', err); // => null\n    if (exists) {\n      // There is a content.yml file.\n      if (template) {\n        // TODO: Deal with instance templates\n        return exit('\\nError while initialising: template instances are not yet supported');\n      } else {\n        var promzard = require('promzard');\n        var file = path.resolve(__dirname, './prompt.js');\n        var content = yaml(read(path.join(config, './content.yml'), 'utf8'));\n\n        console.log(\n          '\\n' +\n            '\\n' +\n            chalk.grey('============================================================================') +\n            '\\n' +\n            chalk.grey('===========                                                      ===========') +\n            '\\n' +\n            chalk.grey('===========') +\n            '            SAFETAG Toolkit Initialisation            ' +\n            chalk.grey('===========') +\n            '\\n' +\n            chalk.grey('===========                                                      ===========') +\n            '\\n' +\n            chalk.grey('============================================================================') +\n            '\\n' +\n            '\\n' +\n            'This script will initialise the current directory as your workspace.' +\n            '\\n' +\n            '\\n' +\n            'It will also update your global `.content` repository' +\n            '\\n' +\n            'and install the following content packages and their dependencies:' +\n            '\\n' +\n            '\\n' +\n            Object.keys(content.packages).map(repo => '\\t' + repo + ': ' + content.packages[repo] + '\\n') +\n            '\\n' +\n            \"Please answer a few questions below and you'll be up and running in no time\" +\n            '\\n' +\n            '\\n' +\n            chalk.yellow(\n              'NOTE: This is a prototype, please accept defaults by hitting enter\\n or hit Ctrl-C at any time to exit.'\n            ) +\n            '\\n'\n        );\n\n        promzard(file, { content, defaults }, (err, responses) => {\n          if ((err && err.message == 'canceled') || (responses && responses.confirm !== 'yes')) {\n            console.log('\\nExiting without initialising. See ya!');\n            process.exit(0);\n          }\n          if (err) exit('Error while processing prompt results', err);\n\n          if (fs.existsSync(responses.repository)) {\n            console.log('> Content repository folder already exists. Continuing.');\n          } else {\n            console.log('> Content repository folder does not exists. Creating folder.');\n            fs.mkdirSync(responses.repository);\n            console.log('> Content repository ' + responses.repository + ' has been created.');\n          }\n\n          if (fs.existsSync(path.join(responses.repository, 'package.json'))) {\n            console.log('> Content repository configuration file already exists. Continuing.');\n          } else {\n            console.log('> Content repository configuration file does not exists. Creating.');\n            fs.writeFileSync(\n              path.join(responses.repository, 'package.json'),\n              JSON.stringify({ private: true }),\n              'utf-8'\n            );\n            console.log(\n              '> Content repository configuration ' + responses.repository + '/package.json has been created.'\n            );\n          }\n\n          // Change working directory temporarily as npm api is insufficient.\n          var current = process.cwd();\n          try {\n            process.chdir(responses.repository);\n          } catch (err) {\n            exit('\\nError while changing directory', err);\n          }\n          packages.install({ repos: content.packages, repository: responses.repository, link }, (err, installed) => {\n            if (err) return exit('\\nError while installing packages', err);\n            // console.log('Content packages installed:' + JSON.stringify(installed));\n            // Deploying worksaces\n\n            // restore working directory\n            try {\n              process.chdir(current);\n            } catch (err) {\n              exit('\\nError while changing directory', err);\n            }\n\n            workspaces.deploy(\n              installed.map(({ name, content: { workspace } }) => ({ name, workspace })),\n              responses.repository,\n              (err, deployed) => {\n                if (err) exit('\\nError while deploying workspaces', err);\n                // console.log(deployed);\n\n                console.log(\n                  '\\n' +\n                    chalk.grey('============================================================================') +\n                    '\\n' +\n                    chalk.grey('===========                                                      ===========') +\n                    '\\n' +\n                    chalk.grey('===========') +\n                    '        Initialisation complete.                      ' +\n                    chalk.grey('===========') +\n                    '\\n' +\n                    chalk.grey('===========') +\n                    '         - use ' +\n                    chalk.yellow('safetag start') +\n                    ' to open the toolkit      ' +\n                    chalk.grey('===========') +\n                    '\\n' +\n                    chalk.grey('===========                                                      ===========') +\n                    '\\n' +\n                    chalk.grey('============================================================================') +\n                    '\\n'\n                );\n\n                // I'll want to save the location of the workspace to the content repo to allow\n                // launching `safetag start` from anywhere.\n\n                return;\n              }\n            );\n          });\n        });\n\n        //   - Use `safetag-toolkit` as its default init mode.\n        //   - npm install `content.yml` dependencies in `~/.content/packages`\n        //   - `bootstrap`\n        //     - version controlled staging directory\n        //       - ask about fork origin remote.\n        //         - if no entry then point to doc and setup only `upstream` remote\n        //       - create git repo in `~/.content/staging/@safetag/*` for each dependent modules and publication containers.\n        //       - content.yml manages versions?\n        //     - working directory\n        //       - render taxonomy from `content` folder in `toolkit` package. (metalsmith workspace deploy config)\n      }\n    } else {\n      console.error(\n        'Error: CLI tool does not have a content.yml configuration file. Please report the error to the developer.'\n      );\n      process.exit(1, '');\n    }\n  });\n}\n\nvar exit = (message, error) => {\n  {\n    console.log(chalk.red('\\n' + message + '\\n'));\n    if (error) console.log('error', error);\n    console.log(\n      chalk.grey('\\n==================================================================\\n\\n') +\n        chalk.red(\n          'Please alert the developer by submitting an issue \\nat https://github.com/contentascode/safetag/issues and copy the whole output of the command above.\\n\\nApologies for the inconvenience!\\n'\n        )\n    );\n    process.exit(0);\n  }\n};\n\nmodule.exports.init = init;\n"]}