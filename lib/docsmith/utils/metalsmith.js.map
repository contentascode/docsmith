{"version":3,"sources":["../../../src/docsmith/utils/metalsmith.js"],"names":["chalk","require","resolve","exists","existsSync","read","readFileSync","basename","extname","dirname","format","yaml","safeLoad","async","fs","path","absolute","unyield","Metalsmith","module","exports","config","callback","source","destination","concurrency","metadata","clean","frontmatter","ignore","name","dir","process","cwd","json","forEach","ext","conf","root","base","e","fatal","Error","replace","metalsmith","eachSeries","normalize","plugins","plugin","cb","opts","mod","local","npm","use","message","stack","err","writeFile","file","data","dest","outputFile","contents","mode","chmod","build","files","log","msg","console","error","red","gray","obj","Array","ret","key","push"],"mappings":"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","file":"metalsmith.js","sourcesContent":["// Extracted from metalsmith library to handle config loading\n// Modified to:\n//  - support config file overrides.\n//  - process files to symlinks instead of building\n\nvar chalk = require('chalk');\nvar resolve = require('path').resolve;\nvar exists = require('fs').existsSync;\nvar read = require('fs').readFileSync;\nvar resolve = require('path').resolve;\nvar basename = require('path').basename;\nvar extname = require('path').extname;\nvar dirname = require('path').dirname;\nvar format = require('path').format;\nvar yaml = require('js-yaml').safeLoad;\nvar async = require('async');\nvar fs = require('co-fs-extra');\nvar path = require('path');\n\nvar absolute = require('absolute');\nvar unyield = require('unyield');\nvar Metalsmith = require('metalsmith');\n\n// Pass config file path, config overrides and make async.\nmodule.exports = function(\n  config,\n  { source, destination, concurrency, metadata, clean, frontmatter, ignore },\n  callback\n) {\n  var name = basename(config, extname(config));\n  var dir = resolve(process.cwd(), dirname(config));\n\n  var json;\n\n  ['.json', '.yml', '.yaml'].forEach(function(ext) {\n    var conf = format({ root: '/', dir: dir, base: name + ext });\n    var path = resolve(dir, dirname(config), conf);\n\n    if (!exists(path) || json) return;\n    try {\n      if (ext === '.json') {\n        json = require(path);\n      } else if (ext === '.yml' || ext === '.yaml') {\n        json = yaml(read(path, 'utf8'));\n      }\n    } catch (e) {\n      return callback(fatal('it seems like ' + conf + ' is malformed.', new Error('Error in conf', conf)));\n    }\n  });\n\n  if (!json)\n    return callback(\n      fatal(\n        'could not find a ' + config.replace('.json', '') + '.json / .yml / .yaml configuration file.',\n        new Error('Could not find configuration file')\n      )\n    );\n\n  var metalsmith = new Metalsmith(dir);\n  if (source || json.source) metalsmith.source(source || json.source);\n  if (destination || json.destination) metalsmith.destination(destination || json.destination);\n  if (concurrency || json.concurrency) metalsmith.concurrency(concurrency || json.concurrency);\n  if (json.metadata) metalsmith.metadata(json.metadata);\n  if (json.clean != null) metalsmith.clean(json.clean);\n  if (json.frontmatter != null) metalsmith.frontmatter(json.frontmatter);\n  if (json.ignore != null) metalsmith.ignore(json.ignore);\n\n  /**\n   * Plugins.\n   */\n\n  async.eachSeries(\n    normalize(json.plugins),\n    function(plugin, cb) {\n      for (var name in plugin) {\n        var opts = plugin[name];\n        var mod;\n\n        try {\n          var local = resolve(dir, name);\n          var npm = resolve(dir, 'node_modules', name);\n          if (exists(local) || exists(local + '.js')) {\n            mod = require(local);\n          } else if (exists(npm)) {\n            mod = require(npm);\n          } else {\n            mod = require(name);\n          }\n        } catch (e) {\n          return cb(fatal('failed to require plugin \"' + name + '\".', new Error('Could not find plugin')));\n        }\n\n        try {\n          metalsmith.use(mod(opts));\n        } catch (e) {\n          return cb(fatal('error using plugin \"' + name + '\"...', e.message + '\\n\\n' + e.stack));\n        }\n      }\n    },\n    err => {\n      return callback(err);\n    }\n  );\n\n  /**\n   * Monkey patch to create symlinked build.\n   */\n\n  metalsmith.writeFile = unyield(function*(file, data) {\n    var dest = this.destination();\n    if (!absolute(file)) file = path.resolve(dest, file);\n\n    try {\n      yield fs.outputFile(file, data.contents);\n      if (data.mode) yield fs.chmod(file, data.mode);\n    } catch (e) {\n      e.message = 'Failed to write the file at: ' + file + '\\n\\n' + e.message;\n      throw e;\n    }\n  });\n\n  /**\n   * Build.\n   */\n\n  metalsmith.build(function(err, files) {\n    if (err) return callback(fatal(err.message, err));\n    log('successfully processed files.');\n\n    callback();\n  });\n\n  /**\n   * Log an error and then exit the process.\n   *\n   * @param {String} msg\n   * @param {String} [stack]  Optional stack trace to print.\n   */\n\n  function fatal(msg, err) {\n    console.error();\n    console.error(chalk.red('  Metalsmith') + chalk.gray(' Â· ') + msg);\n    if (err.stack) {\n      console.error();\n      console.error(chalk.gray(err.stack));\n    }\n    console.error();\n    return err;\n  }\n\n  /**\n   * Log a `message`.\n   *\n   * @param {String} message\n   */\n\n  function log(message) {\n    console.log();\n    console.log(chalk.gray('  Metalsmith Â· ') + message);\n    console.log();\n  }\n\n  /**\n   * Normalize an `obj` of plugins.\n   *\n   * @param {Array or Object} obj\n   * @return {Array}\n   */\n\n  function normalize(obj) {\n    if (obj instanceof Array) return obj;\n    var ret = [];\n\n    for (var key in obj) {\n      var plugin = {};\n      plugin[key] = obj[key];\n      ret.push(plugin);\n    }\n\n    return ret;\n  }\n};\n"]}