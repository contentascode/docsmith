{"version":3,"sources":["../../../src/docsmith/utils/metalsmith.js"],"names":["debug","require","chalk","resolve","exists","existsSync","read","readFileSync","basename","extname","dirname","format","yaml","safeLoad","async","fs","path","absolute","unyield","Metalsmith","debugui","module","exports","config","overrides","callback","name","dir","process","cwd","json","forEach","ext","conf","root","base","e","fatal","Error","replace","metalsmith","source","destination","concurrency","metadata","clean","frontmatter","ignore","plugins","dbg","patch","perf","undefined","concat","eachSeries","normalize","plugin","cb","opts","mod","local","npm","use","message","stack","err","build","log","msg","console","error","red","gray","obj","Array","ret","key","push"],"mappings":"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","file":"metalsmith.js","sourcesContent":["// Extracted from metalsmith library to handle config loading\n// Modified to:\n//  - support config file overrides.\n//  - process files to symlinks instead of building\n\nconst debug = require('debug')('docsmith:metalsmith');\nconst chalk = require('chalk');\nconst resolve = require('path').resolve;\nconst exists = require('fs').existsSync;\nconst read = require('fs').readFileSync;\nconst basename = require('path').basename;\nconst extname = require('path').extname;\nconst dirname = require('path').dirname;\nconst format = require('path').format;\nconst yaml = require('js-yaml').safeLoad;\nconst async = require('async');\nconst fs = require('co-fs-extra');\nconst path = require('path');\n\nconst absolute = require('absolute');\nconst unyield = require('unyield');\nconst Metalsmith = require('metalsmith');\nconst debugui = require('metalsmith-debug-ui');\n\n// Pass config file path, config overrides and make async.\nmodule.exports = function(config, overrides, callback) {\n  const name = basename(config, extname(config));\n  const dir = resolve(process.cwd(), dirname(config));\n\n  let json;\n\n  ['.json', '.yml', '.yaml'].forEach(function(ext) {\n    const conf = format({ root: '/', dir, base: name + ext });\n    const path = resolve(dir, dirname(config), conf);\n\n    if (!exists(path) || json) return;\n    try {\n      if (ext === '.json') {\n        json = require(path);\n      } else if (ext === '.yml' || ext === '.yaml') {\n        json = yaml(read(path, 'utf8'));\n      }\n    } catch (e) {\n      return callback(fatal('it seems like ' + conf + ' is malformed.', new Error('Error in conf', conf)));\n    }\n  });\n\n  if (!json)\n    return callback(\n      fatal(\n        'could not find a ' + config.replace('.json', '') + '.json / .yml / .yaml configuration file.',\n        new Error('Could not find configuration file')\n      )\n    );\n\n  const metalsmith = new Metalsmith(dir);\n\n  const {\n    source = json.source,\n    destination = json.destination,\n    concurrency = json.concurrency,\n    metadata = json.metadata,\n    clean = json.clean,\n    frontmatter = json.frontmatter,\n    ignore = json.ignore,\n    plugins = [],\n    dbg\n  } = overrides;\n\n  if (dbg) debugui.patch(metalsmith, { perf: true });\n\n  if (source) metalsmith.source(source);\n  if (destination) metalsmith.destination(destination);\n  if (concurrency) metalsmith.concurrency(concurrency);\n  if (metadata) metalsmith.metadata(json.metadata ? { ...metadata, ...json.metadata } : metadata);\n\n  if (clean !== undefined) metalsmith.clean(clean);\n  if (frontmatter !== undefined) metalsmith.frontmatter(frontmatter);\n  if (ignore !== undefined) metalsmith.ignore(ignore);\n\n  debug('json.plugins', json.plugins);\n  debug('plugins', plugins);\n  json.plugins = json.plugins.concat(plugins);\n\n  /**\n   * Plugins.\n   */\n\n  async.eachSeries(\n    normalize(json.plugins),\n    function(plugin, cb) {\n      for (const name in plugin) {\n        const opts = plugin[name];\n        let mod;\n\n        try {\n          const local = resolve(dir, name);\n          const npm = resolve(dir, 'node_modules', name);\n          if (exists(local) || exists(local + '.js')) {\n            debug('resolving local package:', local)\n            mod = require(local);\n          } else if (exists(npm)) {\n            debug('resolving npm package:', npm)\n            mod = require(npm);\n          } else {\n            debug('resolving package by name:', name)\n            mod = require(name);\n          }\n        } catch (e) {\n          return cb(fatal('failed to require plugin \"' + name + '\".', new Error('Could not find plugin')));\n        }\n\n        try {\n          metalsmith.use(mod(opts));\n          cb();\n        } catch (e) {\n          return cb(fatal('error using plugin \"' + name + '\"...', e.message + '\\n\\n' + e.stack));\n        }\n      }\n    },\n    err => {\n      return callback(err);\n    }\n  );\n\n  /**\n   * TODO: Monkey patch to create symlinked build?\n   */\n\n  // metalsmith.writeFile = unyield(function*(file, data) {\n  //   const dest = this.destination();\n  //   if (!absolute(file)) file = path.resolve(dest, file);\n  //\n  //   try {\n  //     yield fs.outputFile(file, data.contents);\n  //     if (data.mode) yield fs.chmod(file, data.mode);\n  //   } catch (e) {\n  //     e.message = 'Failed to write the file at: ' + file + '\\n\\n' + e.message;\n  //     throw e;\n  //   }\n  // });\n\n  /**\n   * Build.\n   */\n\n  metalsmith.build(function(err) {\n    if (err) return callback(fatal(err.message, err));\n    log('successfully built files.');\n\n    callback();\n  });\n\n  /**\n   * Log an error and then exit the process.\n   *\n   * @param {String} msg\n   * @param {String} [stack]  Optional stack trace to print.\n   */\n\n  function fatal(msg, err) {\n    console.error();\n    console.error(chalk.red('  Metalsmith') + chalk.gray(' · ') + msg);\n    if (err.stack) {\n      console.error();\n      console.error(chalk.gray(err.stack));\n    }\n    console.error();\n    return err;\n  }\n\n  /**\n   * Log a `message`.\n   *\n   * @param {String} message\n   */\n\n  function log(message) {\n    console.log();\n    console.log(chalk.gray('  Metalsmith · ') + message);\n    console.log();\n  }\n\n  /**\n   * Normalize an `obj` of plugins.\n   *\n   * @param {Array or Object} obj\n   * @return {Array}\n   */\n\n  function normalize(obj) {\n    if (obj instanceof Array) return obj;\n    const ret = [];\n\n    for (const key in obj) {\n      const plugin = {};\n      plugin[key] = obj[key];\n      ret.push(plugin);\n    }\n\n    return ret;\n  }\n};\n"]}