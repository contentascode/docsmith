{"version":3,"sources":["../../../src/docsmith/utils/settings.js"],"names":["yaml","require","fs","path","id","x","local","join","process","cwd","p","repository","env","HOME","resolve","settings","config_path","map","existsSync","findIndex","console","log","safeLoad","readFileSync","integration","e","exit","settings_save","writeFileSync","safeDump","define","name","value","Object","defineProperty","exports","enumerable","owner","repo","transform","branch","build","validate","instance","basename","argv","split","module","save"],"mappings":";;AAAA,IAAMA,OAAOC,QAAQ,SAAR,CAAb;AACA,IAAMC,KAAKD,QAAQ,IAAR,CAAX;AACA,IAAME,OAAOF,QAAQ,MAAR,CAAb;;AAEA,IAAMG,KAAK,SAALA,EAAK;AAAA,SAAKC,CAAL;AAAA,CAAX;AACA,IAAMC,QAAQ,SAARA,KAAQ;AAAA,SAAKH,KAAKI,IAAL,CAAUC,QAAQC,GAAR,EAAV,EAAyBC,CAAzB,CAAL;AAAA,CAAd;AACA,IAAMC,aAAa,SAAbA,UAAa;AAAA,SAAKR,KAAKI,IAAL,CAAUC,QAAQI,GAAR,CAAYC,IAAtB,EAA4B,UAA5B,EAAwCH,CAAxC,CAAL;AAAA,CAAnB;;AAEA;AACA,IAAMI,UAAU,CAACR,MAAM,aAAN,CAAD,EAAuBA,MAAM,cAAN,CAAvB,EAA8CK,WAAW,aAAX,CAA9C,CAAhB;;AAEA,IAAII,iBAAJ;;AAEA,IAAI;AACF;AACA,MAAMC,cAAcF,QAAQA,QAAQG,GAAR,CAAYf,GAAGgB,UAAf,EAA2BC,SAA3B,CAAqCf,EAArC,CAAR,CAApB;AACA,MAAI,CAACY,WAAL,EAAkB;AAChBI,YAAQC,GAAR,CAAY,4CAAZ;AACAD,YAAQC,GAAR,CACE,4GADF;AAGD;AACDN,aAAWf,KAAKsB,QAAL,CAAcpB,GAAGqB,YAAH,CAAgBP,WAAhB,EAA6B,MAA7B,CAAd,CAAX;AACAD,WAASS,WAAT,GAAuBT,SAASS,WAAT,IAAwB,EAA/C;AACD,CAXD,CAWE,OAAOC,CAAP,EAAU;AACVL,UAAQC,GAAR,CAAYI,CAAZ;AACAjB,UAAQkB,IAAR,CAAa,CAAb;AACD;;AAED,SAASC,aAAT,CAAuBZ,QAAvB,EAAiC;AAC/B,MAAI;AACFb,OAAG0B,aAAH,CAAiB,gBAAjB,EAAmC5B,KAAK6B,QAAL,CAAcd,QAAd,CAAnC,EAA4D,MAA5D;AACD,GAFD,CAEE,OAAOU,CAAP,EAAU;AACVL,YAAQC,GAAR,CAAYI,CAAZ;AACD;AACF;;AAED;;AAEA,SAASK,MAAT,CAAgBC,IAAhB,EAAsBC,KAAtB,EAA6B;AAC3BC,SAAOC,cAAP,CAAsBC,OAAtB,EAA+BJ,IAA/B,EAAqC;AACnCC,SADmC;AAEnCI,gBAAY;AAFuB,GAArC;AAID;;AAED;;AAEAN,OAAO,gBAAP,EAAyB;AACvBO,SAAO,EADgB;AAEvBC,QAAM,EAFiB;AAGvBC,aAAW,EAHY;AAIvBpC,QAAM;AAJiB,CAAzB;;AAOA2B,OAAO,gBAAP,EAAyB;AACvBU,UAAQ,YADe;AAEvBC,SAAO,MAFgB,EAER;AACfC,YAAU,CAAC,OAAD;AAHa,CAAzB;;AAMA,IAAMC,WAAWxC,KAAKyC,QAAL,CAAcpC,QAAQqC,IAAR,CAAa,CAAb,CAAd,EAA+BC,KAA/B,CAAqC,GAArC,EAA0C,CAA1C,CAAjB;;AAEAC,OAAOZ,OAAP,CAAeQ,QAAf,GAA0BA,QAA1B;AACAI,OAAOZ,OAAP,CAAepB,QAAf,GAA0BA,QAA1B;AACAgC,OAAOZ,OAAP,CAAea,IAAf,GAAsBrB,aAAtB","file":"settings.js","sourcesContent":["const yaml = require('js-yaml');\nconst fs = require('fs');\nconst path = require('path');\n\nconst id = x => x;\nconst local = p => path.join(process.cwd(), p);\nconst repository = p => path.join(process.env.HOME, '.content', p);\n\n// Resolve content config file\nconst resolve = [local('content.yml'), local('_content.yml'), repository('content.yml')];\n\nlet settings;\n\ntry {\n  // Get document, or throw exception on error\n  const config_path = resolve[resolve.map(fs.existsSync).findIndex(id)];\n  if (!config_path) {\n    console.log('Cannot find content as code configuration.');\n    console.log(\n      'Make sure to initialise your content repository or run this command from within a content as code project.'\n    );\n  }\n  settings = yaml.safeLoad(fs.readFileSync(config_path, 'utf8'));\n  settings.integration = settings.integration || {};\n} catch (e) {\n  console.log(e);\n  process.exit(1);\n}\n\nfunction settings_save(settings) {\n  try {\n    fs.writeFileSync('./_content.yml', yaml.safeDump(settings), 'utf8');\n  } catch (e) {\n    console.log(e);\n  }\n}\n\n// Constants\n\nfunction define(name, value) {\n  Object.defineProperty(exports, name, {\n    value,\n    enumerable: true\n  });\n}\n\n// Defaults\n\ndefine('DEFAULT_GITHUB', {\n  owner: '',\n  repo: '',\n  transform: '',\n  path: '.'\n});\n\ndefine('DEFAULT_TRAVIS', {\n  branch: 'versions/*',\n  build: 'rake', // because of jekyll-travis for now.\n  validate: ['links']\n});\n\nconst instance = path.basename(process.argv[1]).split('-')[0];\n\nmodule.exports.instance = instance;\nmodule.exports.settings = settings;\nmodule.exports.save = settings_save;\n"]}